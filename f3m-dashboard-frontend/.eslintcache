[{"D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\index.tsx":"1","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\store\\index.js":"2","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\store\\reducers\\dashboardReducer.js":"3","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\api.tsx":"4","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\components\\valuesCard\\valuesCard.tsx":"5","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\container\\dashboard\\dashboard.tsx":"6","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\container\\dashboard\\filterDashboard.tsx":"7","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\container\\dashboard\\subHeaderDashboard.tsx":"8","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\store\\actions\\dashboardAction.js":"9","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\components\\charts\\typeCharts\\barChart.tsx":"10","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\store\\actions\\salesAction.js":"11","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\components\\modal\\modal.tsx":"12","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\components\\charts\\chart.tsx":"13","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\store\\reducers\\salesReducer.js":"14","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\components\\charts\\typeCharts\\lineChart.tsx":"15","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\services\\F3M\\header-service.js":"16","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\shared\\helpers\\encrypt.ts":"17","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\shared\\helpers\\utils.ts":"18","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\components\\charts\\typeCharts\\doughnutChart.tsx":"19","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\shared\\helpers\\constants.ts":"20"},{"size":1217,"mtime":1616680603897,"results":"21","hashOfConfig":"22"},{"size":285,"mtime":1616680603900,"results":"23","hashOfConfig":"22"},{"size":5759,"mtime":1617196065860,"results":"24","hashOfConfig":"22"},{"size":3551,"mtime":1617194702090,"results":"25","hashOfConfig":"22"},{"size":5028,"mtime":1617174674115,"results":"26","hashOfConfig":"22"},{"size":60204,"mtime":1617197782443,"results":"27","hashOfConfig":"22"},{"size":13078,"mtime":1617192542919,"results":"28","hashOfConfig":"22"},{"size":8261,"mtime":1617192725411,"results":"29","hashOfConfig":"22"},{"size":8994,"mtime":1617195098820,"results":"30","hashOfConfig":"22"},{"size":6989,"mtime":1616680603891,"results":"31","hashOfConfig":"22"},{"size":1243,"mtime":1616680603900,"results":"32","hashOfConfig":"22"},{"size":46612,"mtime":1617086691653,"results":"33","hashOfConfig":"22"},{"size":7143,"mtime":1616680603890,"results":"34","hashOfConfig":"22"},{"size":595,"mtime":1616680603901,"results":"35","hashOfConfig":"22"},{"size":9009,"mtime":1616680603892,"results":"36","hashOfConfig":"22"},{"size":3555,"mtime":1617086691655,"results":"37","hashOfConfig":"22"},{"size":313,"mtime":1617086691655,"results":"38","hashOfConfig":"22"},{"size":1167,"mtime":1617086691655,"results":"39","hashOfConfig":"22"},{"size":4031,"mtime":1616680603891,"results":"40","hashOfConfig":"22"},{"size":229,"mtime":1617086691655,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1l1tuzn",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"44"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\index.tsx",[],["95","96"],"D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\store\\index.js",[],["97","98"],"D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\store\\reducers\\dashboardReducer.js",[],"D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\api.tsx",[],"D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\components\\valuesCard\\valuesCard.tsx",["99","100"],"import React, { FunctionComponent, useState, useEffect } from 'react';\r\n//INSIDE COMPONENTS\r\n\r\n//OUTSIDE COMPONENTS\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles, Typography, Divider } from '@material-ui/core';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport Loader from \"react-loader-spinner\";\r\nimport clsx from 'clsx';\r\n\r\n//CSS, STYLES & MEDIA ASSETS\r\n\r\n//UTILS\r\n\r\ninterface ValuesCardProps {\r\n  colorOfValueSection?: string,\r\n  colorTextOfValueSection?: string,\r\n  colorBorderOfValueSection?: string,\r\n  colorTextOfBodyTitleSection?: string,\r\n  colorTextOfBodyTitle2Section?: string,\r\n  percentageColor?: string,\r\n  percentageTextColor?: string,\r\n  value?: any,\r\n  title?: string,\r\n  percentage?: string,\r\n  bodyTitle1?: string,\r\n  bodyContent1?: any,\r\n  bodyTitle2?: string,\r\n  bodyContent2?: any,\r\n  isLoading?: boolean\r\n}\r\n\r\nconst ValuesCard: FunctionComponent<ValuesCardProps> = ({\r\n  colorOfValueSection = \"#e6eff2\",\r\n  colorTextOfValueSection = \"#444444\",\r\n  colorBorderOfValueSection = \"#c8dfe8\",\r\n  colorTextOfBodyTitleSection = \"#9caeb5\",\r\n  colorTextOfBodyTitle2Section = \"#86959b\",\r\n  percentageColor = \"rgb(76 175 80 / 10%)\",\r\n  percentageTextColor = \"#4caf50\",\r\n  value = \"0\",\r\n  title = \"No title\",\r\n  percentage = \"0\",\r\n  bodyTitle1 = \"No title\",\r\n  bodyContent1 = \"0\",\r\n  bodyTitle2 = \"No title\",\r\n  bodyContent2 = \"0\",\r\n  isLoading = true\r\n}) => {\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    valueSection: {\r\n      background: colorOfValueSection,\r\n      color: colorTextOfValueSection,\r\n      borderTopRightRadius: 6,\r\n      borderTopLeftRadius: 6\r\n    },\r\n    card: {\r\n      borderColor: colorBorderOfValueSection,\r\n      boxShadow: \"0px 3px 8px rgba(0,0,0,0.08)\",\r\n      color: \"#444444\",\r\n      borderRadius: 6,\r\n      height: \"calc(100% - 30px)\",\r\n      marginBottom: 30,\r\n    },\r\n    title: {\r\n      fontWeight: \"bold\",\r\n      fontFamily: \"Open Sans\",\r\n      textTransform: \"uppercase\"\r\n    },\r\n    valuetitle: {\r\n      fontSize: \"1.875rem\",\r\n      fontWeight: 400\r\n    },\r\n    loaderContainer: {\r\n      textAlign: 'center',\r\n      marginTop: '10px'\r\n\r\n    },\r\n    cardloader: {\r\n      position: 'absolute',\r\n      left: '38%',\r\n      top: '38%',\r\n      'z-index': '999'\r\n    },\r\n    percentage: {\r\n      backgroundColor: percentageColor,\r\n      color: percentageTextColor,\r\n      borderRadius: 2,\r\n      display: \"inline-block\",\r\n      minWidth: 48,\r\n      textAlign: \"center\",\r\n      verticalAlign: \"middle\",\r\n      padding: \"0 5px\"\r\n    },\r\n    percentageCaption: {\r\n      verticalAlign: 1,\r\n      fontWeight: \"bold\",\r\n    },\r\n    percentageIcon: {\r\n      marginTop: \"-4px\"\r\n    },\r\n    cardBody: {\r\n\r\n    },\r\n    bodyTitle1: {\r\n      fontWeight: \"bold\",\r\n      fontFamily: \"Open Sans\",\r\n      textTransform: \"uppercase\",\r\n      color: colorTextOfBodyTitleSection\r\n    },\r\n    bodyContent1: {\r\n      fontWeight: \"normal\"\r\n    },\r\n    divider: {\r\n      backgroundColor: colorBorderOfValueSection\r\n    },\r\n    bodyTitle2: {\r\n      fontWeight: 400,\r\n      textTransform: \"uppercase\",\r\n      color: colorTextOfBodyTitle2Section\r\n    },\r\n    bodyContent2: {\r\n      fontWeight: \"normal\"\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Paper variant=\"outlined\" className={`${classes.card}`}>\r\n        <div className={`${classes.valueSection} p-4`}>\r\n          <Typography variant=\"subtitle2\" component=\"h3\" className={`${classes.title} mb-3`}>\r\n            {title}\r\n          </Typography>\r\n\r\n          <div className={clsx(classes.loaderContainer, classes.cardloader)}>\r\n            <Loader type=\"TailSpin\" color=\"#5c6bc0\" height={50} width={50} visible={isLoading} />\r\n          </div>\r\n          <Typography variant=\"h4\" component=\"h4\" className={`${classes.valuetitle} mb-2`} >\r\n            {value}€\r\n                </Typography>\r\n          <div className={`${classes.percentage}`}>\r\n            <Typography variant=\"caption\" className={classes.percentageCaption}>\r\n              {\r\n                Number(percentage) > 0 &&\r\n                <ArrowUpwardIcon fontSize=\"small\" className={classes.percentageIcon} />\r\n              }\r\n              {percentage}%\r\n                  </Typography>\r\n          </div>\r\n        </div>\r\n        <div className={`${classes.cardBody} p-4`}>\r\n          <Typography variant=\"caption\" component=\"h5\" className={`${classes.bodyTitle1} mb-1`}>\r\n            {bodyTitle1}\r\n          </Typography>\r\n          <Typography variant=\"h6\" component=\"h5\" className={`${classes.bodyContent1}`}>\r\n            {bodyContent1}€\r\n                </Typography>\r\n          <Divider className={`${classes.divider} my-3`} />\r\n          <Typography variant=\"caption\" component=\"h5\" className={`${classes.bodyTitle2} mb-1`}>\r\n            {bodyTitle2}\r\n          </Typography>\r\n          <Typography variant=\"h6\" component=\"h5\" className={`${classes.bodyContent2}`}>\r\n            {bodyContent2}\r\n          </Typography>\r\n        </div>\r\n      </Paper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ValuesCard;\r\n","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\container\\dashboard\\dashboard.tsx",["101","102","103","104","105","106","107"],"D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\container\\dashboard\\filterDashboard.tsx",["108","109","110","111","112","113","114","115","116","117","118","119","120"],"import React, { Component, useEffect, useState } from \"react\";\r\nimport { InputAdornment, Typography } from \"@material-ui/core\";\r\nimport { makeStyles, useTheme, Theme } from '@material-ui/core/styles';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport StoreIcon from '@material-ui/icons/Store';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loadShops, loadUsers, saveFilter } from './../../store/actions/dashboardAction';\r\nimport NumberFormat from 'react-number-format';\r\nimport Loader from \"react-loader-spinner\";\r\nimport clsx from 'clsx';\r\n\r\ninterface dashboardProps {\r\n  filterChanged: (event: any) => any\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '&.miniFilter': {\r\n      '& .filter': {\r\n        width: 50,\r\n        [theme.breakpoints.down('sm')]: {\r\n          position: \"relative\"\r\n        }\r\n      },\r\n      '& .filterIcon': {\r\n        display: \"none\"\r\n      },\r\n      '& .miniFilterIcon': {\r\n        display: \"block\"\r\n      }\r\n    },\r\n    '& .miniFilterIcon': {\r\n      display: \"none\",\r\n      marginLeft: -2,\r\n      '& .miniToggleIcon': {\r\n        marginRight: -8\r\n      }\r\n    }\r\n  },\r\n  loaderContainer: {\r\n    textAlign: 'center',\r\n    marginTop: '150px'\r\n\r\n  },\r\n  filter: {\r\n    width: 250,\r\n    backgroundColor: \"#d2f3ff\",\r\n    padding: 15,\r\n    borderRadius: 10,\r\n    height: \"100%\",\r\n    overflowY: \"auto\",\r\n    [theme.breakpoints.down('sm')]: {\r\n      position: \"absolute\",\r\n      zIndex: 2\r\n    },\r\n  },\r\n  title: {\r\n    textTransform: \"uppercase\",\r\n    fontWeight: \"bold\"\r\n  },\r\n  formControl: {\r\n    marginTop: theme.spacing(3),\r\n    width: \"100%\",\r\n    '& label.Mui-focused': {\r\n      color: \"#0098d2\"\r\n    },\r\n    '& .MuiFilledInput-root': {\r\n      backgroundColor: \"#FFF\"\r\n    },\r\n    '& .MuiFilledInput-underline:after': {\r\n      borderColor: \"#0098d2\"\r\n    }\r\n  },\r\n  chips: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  chip: {\r\n    margin: 2,\r\n    backgroundColor: \"#0098d2\",\r\n    color: \"#FFF\",\r\n    height: 24\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  formControlInput: {\r\n    backgroundColor: \"#FFF\"\r\n  },\r\n  toggleIcon: {\r\n    color: \"#0098d2\",\r\n    textAlign: \"right\",\r\n    marginBottom: 20,\r\n    cursor: \"pointer\",\r\n    whiteSpace: \"nowrap\",\r\n    '& .MuiSvgIcon-root': {\r\n      marginLeft: \"-12px\"\r\n    }\r\n  },\r\n  closeButton: {\r\n    padding: 0\r\n  },\r\n  badgePrimary: {\r\n    '& .MuiBadge-colorPrimary': {\r\n      backgroundColor: \"#0098d2\"\r\n    }\r\n  },\r\n  dateMini: {\r\n    color: \"#0098d2\",\r\n    fontWeight: \"bold\",\r\n    fontSize: 10,\r\n    marginLeft: -2\r\n  }\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\n\r\nconst names = [\r\n  {\r\n    id: 1,\r\n    text: 'Loja 1'\r\n  },\r\n  {\r\n    id: 2,\r\n    text: 'Loja 2'\r\n  },\r\n  {\r\n    id: 3,\r\n    text: 'Loja 3'\r\n  },\r\n  {\r\n    id: 4,\r\n    text: 'Loja 4'\r\n  },\r\n  {\r\n    id: 5,\r\n    text: 'Loja 5'\r\n  },\r\n  {\r\n    id: 6,\r\n    text: 'Loja 6'\r\n  }\r\n];\r\n\r\nfunction getStyles(name: string, theme: Theme) {\r\n  return {\r\n    fontWeight: theme.typography.fontWeightMedium\r\n  };\r\n}\r\n\r\nexport default function FilterDashboard(props: dashboardProps) {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const [storesId, setStoresId] = React.useState<number[]>([]);\r\n  const [usersId, setUsersId] = React.useState<number[]>([]);\r\n  const [referenceDate, setReferenceDate] = React.useState<Date>(new Date());\r\n\r\n  const [selectedstoreIdCount, setselectedstoreIdCount] = React.useState<number>();\r\n  const [selecteduserIdCount, setselecteduserIdCount] = React.useState<number>();\r\n\r\n  const payload: any = {\r\n    storesId: [],\r\n    usersId: [],\r\n    referenceDate: new Date(),\r\n    isSale: true\r\n  }\r\n\r\n\r\n  let year = payload.referenceDate.getFullYear();\r\n  let month = (payload.referenceDate.getMonth() + 1) < 10 ? '0' + (payload.referenceDate.getMonth() + 1) : (payload.referenceDate.getMonth() + 1);\r\n  let date = (payload.referenceDate.getDate()) < 10 ? '0' + payload.referenceDate.getDate() : payload.referenceDate.getDate();\r\n  let datestr = year + '-' + month + '-' + date;\r\n\r\n  const [filterstate, setFilterstate] = useState(payload);\r\n\r\n\r\n  const HandleChangeStore = (event: React.ChangeEvent<{ value: any }>) => {\r\n\r\n    let payload = savedFilter ? savedFilter : filterstate;\r\n\r\n    setStoresId(event.target.value as number[]);\r\n    let selecetdStoreIds: number[] = [];\r\n\r\n    event.target.value.forEach((item: string) => {\r\n\r\n      const id = dashboardData.shopdata.filter((x: any) => x.shopName == item)[0].id;\r\n      selecetdStoreIds.push(id);\r\n\r\n    });\r\n\r\n    payload.storesId = selecetdStoreIds;\r\n    setselectedstoreIdCount(selecetdStoreIds.length);\r\n    dispatch(saveFilter(payload));\r\n    setFilterstate(payload);\r\n    props.filterChanged(payload);\r\n\r\n  };\r\n\r\n  const HandleChangeUser = (event: React.ChangeEvent<{ value: any }>) => {\r\n\r\n    let payload = savedFilter ? savedFilter : filterstate;\r\n\r\n    setUsersId(event.target.value as number[]);\r\n    payload.usersId = [event.target.value];\r\n    setselecteduserIdCount(payload.usersId.length);\r\n    setFilterstate(payload);\r\n    dispatch(saveFilter(payload));\r\n    props.filterChanged(payload);\r\n  };\r\n\r\n  const HandleChangeDate = (event: React.ChangeEvent<{ value: any }>) => {\r\n\r\n    let payload = savedFilter ? savedFilter : filterstate;\r\n\r\n    setReferenceDate(event.target.value as Date);\r\n    payload.referenceDate = new Date(event.target.value);\r\n    setFilterstate(payload);\r\n    dispatch(saveFilter(payload));\r\n    props.filterChanged(payload);\r\n  };\r\n\r\n  const BindFilterDropdown = () => {\r\n\r\n    useEffect(() => {\r\n      //dashboard\r\n      dispatch(loadShops(payload));\r\n      dispatch(loadUsers(payload));\r\n    }, [dispatch]);\r\n\r\n\r\n  }\r\n\r\n  const [age, setAge] = React.useState('');\r\n\r\n  const handleChangeSingle = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setAge(event.target.value as string);\r\n  };\r\n\r\n  const [sidebar, setSidebar] = React.useState(false);\r\n\r\n  BindFilterDropdown();\r\n\r\n  const dashboardData: any = useSelector((state: any) => state.dashboard.dashboarddata);\r\n  const savedFilter: any = useSelector((state: any) => state.dashboard.filterPayload);\r\n\r\n  if (dashboardData.shopdata && dashboardData.shopdata.length > 0 && dashboardData.userdata && dashboardData.userdata.length > 0) {\r\n    return (\r\n      <aside className={`${classes.root} ${sidebar ? \"miniFilter\" : \"\"}`}>\r\n        <div className={`${classes.filter} filter`}>\r\n          <div className=\"miniFilterIcon\">\r\n            <div onClick={() => setSidebar(false)} className={`${classes.toggleIcon} miniToggleIcon`}>\r\n              <ChevronRightIcon fontSize=\"small\" />\r\n              <ChevronRightIcon fontSize=\"small\" />\r\n              <ChevronRightIcon fontSize=\"small\" />\r\n            </div>\r\n            <FormControl className={classes.formControl}>\r\n              <Badge badgeContent={selectedstoreIdCount} color=\"primary\" className={classes.badgePrimary}>\r\n                <StoreIcon />\r\n              </Badge>\r\n            </FormControl>\r\n            <FormControl className={classes.formControl}>\r\n              <Badge badgeContent={selecteduserIdCount} color=\"primary\" className={classes.badgePrimary}>\r\n                <GroupIcon />\r\n              </Badge>\r\n            </FormControl>\r\n            <FormControl className={classes.formControl}>\r\n              <DateRangeIcon />\r\n              <span className={`${classes.dateMini}`}></span>\r\n            </FormControl>\r\n          </div>\r\n          <div className=\"filterIcon\">\r\n            <div onClick={() => setSidebar(true)} className={classes.toggleIcon}>\r\n              <ChevronLeftIcon fontSize=\"small\" />\r\n              <ChevronLeftIcon fontSize=\"small\" />\r\n              <ChevronLeftIcon fontSize=\"small\" />\r\n            </div>\r\n            <Typography variant=\"subtitle2\" component=\"h6\" className={classes.title}>\r\n              Filtros:\r\n            </Typography>\r\n            <FormControl variant=\"filled\" className={classes.formControl}>\r\n              <InputLabel shrink id=\"demo-mutiple-chip-label\">Lojas</InputLabel>\r\n              <Select\r\n                labelId=\"demo-mutiple-chip-label\"\r\n                id=\"demo-mutiple-chip\"\r\n                multiple\r\n                value={storesId}\r\n                onChange={HandleChangeStore}\r\n                // input={<Input id=\"select-multiple-chip\" />}\r\n                displayEmpty\r\n                renderValue={(selected) => (\r\n                  <div className={classes.chips}>\r\n                    {(selected as string[]).map((value) => (\r\n                      <Chip key={value} label={value} className={classes.chip} />\r\n                    ))}\r\n                    {/* <IconButton size=\"small\" color=\"inherit\" edge=\"start\" className={`${classes.closeButton} ml-1`} aria-label=\"menu\">\r\n                      <CloseIcon fontSize=\"small\" />\r\n                    </IconButton>                    */}\r\n                  </div>\r\n                )}\r\n                MenuProps={{\r\n                  anchorOrigin: {\r\n                    vertical: \"bottom\",\r\n                    horizontal: \"right\"\r\n                  },\r\n                  transformOrigin: {\r\n                    vertical: \"top\",\r\n                    horizontal: \"right\"\r\n                  },\r\n                  getContentAnchorEl: null,\r\n                  PaperProps: {\r\n                    style: {\r\n                      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n                      width: 220,\r\n                    },\r\n                  }\r\n                }}\r\n                startAdornment={\r\n                  <InputAdornment position=\"start\">\r\n                    <StoreIcon />\r\n                  </InputAdornment>\r\n                }\r\n              >\r\n                {/* <MenuItem value=\"\" disabled>Todos</MenuItem> */}\r\n                {dashboardData.shopdata.map((name: any) => (\r\n                  <MenuItem key={name.id} value={name.shopName}>\r\n                    {name.shopName}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl variant=\"filled\" className={classes.formControl}>\r\n              <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                Utilizadores\r\n              </InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-placeholder-label-label\"\r\n                id=\"demo-simple-select-placeholder-label\"\r\n                value={usersId}\r\n\r\n                onChange={HandleChangeUser}\r\n                displayEmpty\r\n                MenuProps={{\r\n                  anchorOrigin: {\r\n                    vertical: \"bottom\",\r\n                    horizontal: \"right\"\r\n                  },\r\n                  transformOrigin: {\r\n                    vertical: \"top\",\r\n                    horizontal: \"right\"\r\n                  },\r\n                  getContentAnchorEl: null,\r\n                  PaperProps: {\r\n                    style: {\r\n                      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n                      width: 220,\r\n                    },\r\n                  }\r\n                }}\r\n                startAdornment={\r\n                  <InputAdornment position=\"start\">\r\n                    <GroupIcon />\r\n                  </InputAdornment>\r\n                }\r\n              >\r\n                {dashboardData.userdata.map((item: any) => (\r\n                  <MenuItem value={item.id}>{item.firstName}</MenuItem>\r\n                ))}\r\n\r\n\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel shrink id=\"demo-date-label-label\"></InputLabel>\r\n              <TextField\r\n                id=\"demo-date-label\"\r\n                type=\"date\"\r\n                onChange={HandleChangeDate}\r\n                variant=\"filled\"\r\n                label=\"Data de Referência\"\r\n                defaultValue={datestr}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n              />\r\n            </FormControl>\r\n          </div>\r\n        </div>\r\n      </aside>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <div className={clsx(classes.loaderContainer)}>\r\n        <Loader type=\"TailSpin\" color=\"#5c6bc0\" height={100} width={100} visible={true ? dashboardData.billing : false} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\container\\dashboard\\subHeaderDashboard.tsx",["121","122","123","124","125"],"D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\store\\actions\\dashboardAction.js",[],"D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\components\\charts\\typeCharts\\barChart.tsx",["126","127","128","129","130"],"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n//OUTSIDE COMPONENTS\r\nimport moment, { Moment } from 'moment';\r\nimport 'moment/locale/pt';\r\nimport 'moment/locale/en-gb'\r\nimport Chartjs, { ChartTooltipModel } from \"chart.js\";\r\nimport 'hammerjs';\r\nimport { PluginServiceRegistrationOptions, ChartColor, Scriptable, ChartPoint, ChartTooltipCallback, ChartLegendLabelItem, ChartData } from \"chart.js\";\r\nimport zoom from 'chartjs-plugin-zoom';\r\n\r\nexport interface BarChartProps {\r\n\tpluginOfChart?: PluginServiceRegistrationOptions[],\r\n\txAxisData?: number | string | Date | Moment,\r\n\r\n\t//labelsXAxis?: (string | TFunctionResult | undefined | number | Date | Moment | number[] | string[] | Date[] | Moment[])[] | undefined,\r\n\r\n\tfirstLabelData?: string,\r\n\tfirstBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfirstBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfirstData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\tsecondLabelData?: string,\r\n\tsecondBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tsecondBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tsecondData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\tthirdLabelData?: string,\r\n\tthirdBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tthirdBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tthirdData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\tfourthLabelData?: string,\r\n\tfourthBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfourthBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfourthData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\tfifthLabelData?: string,\r\n\tfifthBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfifthBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfifthData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\txAxisType?: string,\r\n\r\n\tlegendDisplay?: boolean\r\n\r\n\tdateFrom?: string,\r\n\tdateTo?: string,\r\n\r\n\ttooltipCallback?: ChartTooltipCallback,\r\n\t//customTooltip?: ((tooltipModel: ChartTooltipModel) => void) | undefined,\r\n\r\n\tyAxesTicksMin?: number,\r\n\tyAxesTicksMax?: number,\r\n\r\n\tdata?: any\r\n\tchartLabels?: any;\r\n\r\n\tyAxesTicksCallback?: (\r\n\t\tvalue: string | number,\r\n\t\tindex: number,\r\n\t\tvalues: number[] | string[]\r\n\t) => string | number | null | undefined;\r\n\r\n\tyAxesStepSize?: number\r\n\thidden?: boolean\r\n}\r\n\r\nconst BarChart = ({\r\n\tpluginOfChart,\r\n\txAxisData,\r\n\t//labelsXAxis,\r\n\tfirstLabelData,\r\n\tfirstBorderColorData,\r\n\tfirstBackgroundColorData,\r\n\tfirstData,\r\n\tsecondLabelData,\r\n\tsecondBorderColorData,\r\n\tsecondBackgroundColorData,\r\n\tsecondData,\r\n\tthirdLabelData,\r\n\tthirdBorderColorData,\r\n\tthirdBackgroundColorData,\r\n\tthirdData,\r\n\tfourthLabelData,\r\n\tfourthBorderColorData,\r\n\tfourthBackgroundColorData,\r\n\tfourthData,\r\n\tfifthLabelData,\r\n\tfifthBorderColorData,\r\n\tfifthBackgroundColorData,\r\n\tfifthData,\r\n\txAxisType,\r\n\tlegendDisplay,\r\n\tdata,\r\n\tchartLabels,\r\n\tdateFrom,\r\n\tdateTo,\r\n\t//customTooltip,\r\n\ttooltipCallback,\r\n\tyAxesTicksMin,\r\n\tyAxesTicksMax,\r\n\tyAxesTicksCallback,\r\n\tyAxesStepSize = 1,\r\n\thidden = false\r\n}: BarChartProps) => {\r\n\r\n\t// initialise with null, but tell TypeScript we are looking for an HTMLCanvasElement\r\n\tconst chartContainer = useRef<HTMLCanvasElement>(null);\r\n\tconst [chartInstance, setChartInstance] = useState<Chart | null>();\r\n\tconst [zoomOn, setZoomOn] = useState(false);\r\n\r\n\tconst chartConfig = {\r\n\t\ttype: \"bar\",\r\n\t\tmaintainAspectRatio: true,\r\n\t\tdata: {\r\n\t\t\tlabels: [],\r\n\t\t\tdatasets: [\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: firstLabelData,\r\n\t\t\t\t\tbackgroundColor: '#ec407a',\r\n\t\t\t\t\tborderWidth: 2,\r\n\t\t\t\t\tdata: firstData\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: secondLabelData,\r\n\t\t\t\t\tbackgroundColor: 'rgb(92, 107, 192)',\r\n\t\t\t\t\tborderWidth: 2,\r\n\t\t\t\t\tdata: secondData\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: thirdLabelData,\r\n\t\t\t\t\tbackgroundColor: 'rgb(38, 198, 218)',\r\n\t\t\t\t\tborderWidth: 2,\r\n\t\t\t\t\tdata: thirdData\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: fourthLabelData,\r\n\t\t\t\t\tbackgroundColor: 'rgb(102, 187, 106)',\r\n\t\t\t\t\tborderWidth: 2,\r\n\t\t\t\t\tdata: fourthData\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: fifthLabelData,\r\n\t\t\t\t\tbackgroundColor: 'rgb(255, 167, 38)',\r\n\t\t\t\t\tborderWidth: 2,\r\n\t\t\t\t\tdata: fifthData\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\toptions: {\r\n\t\t\tlegend: {\r\n\t\t\t\tdisplay: legendDisplay as boolean,\r\n\t\t\t\tposition: 'bottom' as \"bottom\" | \"left\" | \"right\" | \"top\" | \"chartArea\" | undefined,\r\n\t\t\t\tlabels: {\r\n\t\t\t\t\tfontSize: 10,\r\n\t\t\t\t\tboxWidth: 20,\r\n\t\t\t\t\tfilter: function (item: ChartLegendLabelItem, chart: ChartData) {\r\n\t\t\t\t\t\tif (item.text != undefined) {\r\n\t\t\t\t\t\t\treturn !item.text.includes('null');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\ttooltips: {\r\n\t\t\t\tenabled: true,\r\n\t\t\t\t// custom: customTooltip as ((tooltipModel: ChartTooltipModel) => void) | undefined,\r\n\t\t\t\tmode: 'index' as \"label\" | \"index\" | \"x\" | \"point\" | \"nearest\" | \"single\" | \"x-axis\" | \"dataset\" | \"y\" | undefined,\r\n\t\t\t\tcallbacks: tooltipCallback as ChartTooltipCallback,\r\n\t\t\t\tfooterFontStyle: 'normal'\r\n\t\t\t},\r\n\t\t\tpan: {\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tmode: 'x'\r\n\t\t\t},\r\n\t\t\tzoom: {\r\n\t\t\t\tenabled: zoomOn,\r\n\t\t\t\tmode: 'x'\r\n\t\t\t},\r\n\t\t\tresponsive: true,\r\n\t\t\tmaintainAspectRatio: true,\r\n\t\t\tevents: ['click'],\r\n\r\n\t\t\tscales: {\r\n\t\t\t\txAxes: [{\r\n\t\t\t\t\tgridLines: {\r\n\t\t\t\t\t\toffsetGridLines: true\r\n\t\t\t\t\t}\r\n\t\t\t\t}],\r\n\t\t\t\tyAxes: [{\r\n\t\t\t\t\tticks: {  \r\n\t\t\t\t\t\tbeginAtZero:true,\r\n\t\t\t\t\t\tmaxTicksLimit: 0,\r\n\t\t\t\t\t\tmax:100\r\n\t\t\t\t\t  }\r\n\t\t\t\t  }] \r\n\t\t\t}\r\n\t\t},\r\n\t\tplugins: pluginOfChart as PluginServiceRegistrationOptions[],\r\n\t};\r\n\r\n\tfillChartData();\r\n\r\n\tfunction fillChartData() {\r\n\r\n\t\tchartConfig.data.datasets = [];\r\n\r\n\t\tconst dataArray = data.split(',');\r\n\t\tconst labelArray = chartLabels.split(',');\r\n\r\n\t\tconst background = [\r\n\t\t\t'#ec407a',\r\n\t\t\t'#5c6bc0',\r\n\t\t\t'#26c6da',\r\n\t\t\t'#66bb6a',\r\n\t\t\t'#ffa726'\r\n\t\t]\r\n\r\n\t\tdataArray.forEach((item: any, index: number) => {\r\n\r\n\t\t\tlet label: string = labelArray[index];\r\n\t\t\tlabel = label.replace('[', '');\r\n\t\t\tlabel = label.replace(']', '');\r\n\t\t\tlabel = label.replace(/\"/g, \"\");\r\n\t\t\tlet dataNumber = item.replace(/[^0-9]/, \"\")\r\n\r\n\t\t\tlet updatedObject =\r\n\t\t\t{\r\n\t\t\t\tlabel: label,\r\n\t\t\t\tbackgroundColor: background[index],\r\n\t\t\t\tborderWidth: 3,\r\n\t\t\t\tdata: [dataNumber]\r\n\t\t\t}\r\n\r\n\t\t\tchartConfig.data.datasets.push(updatedObject);\r\n\r\n\t\t});\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tlet language: string;\r\n\t\tlanguage = localStorage.getItem(\"i18nextLng\") || \"pt\";\r\n\t\tif (language.length > 2) {\r\n\t\t\tlanguage = language.substr(0, 2).toUpperCase();\r\n\t\t}\r\n\t\tmoment.locale(language)\r\n\r\n\t\tChartjs.plugins.register(zoom);\r\n\r\n\t\t// strict null checks need us to check if chartContainer and current exist.\r\n\t\t// but once current exists, it is of type HTMLCanvasElement\r\n\t\tif (chartContainer && chartContainer.current) {\r\n\t\t\tconst newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n\t\t\tsetChartInstance(newChartInstance);\r\n\t\t}\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<canvas hidden={hidden} ref={chartContainer} height=\"210px\" className=\"chart\" />\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default BarChart;\r\n","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\store\\actions\\salesAction.js",["131"],"import axios from 'axios';\r\nimport { getSalesURL, postSalesURL } from './../../api';\r\nimport { toast } from 'react-toastify';\r\n//Action createStore\r\n\r\nexport const loadSales = (year) => async (dispatch) => {\r\n    //FETCH Axios\r\n    const salesData = await axios.post(getSalesURL(year))\r\n\r\n    dispatch({\r\n        type: \"FETCH_SALES_DATA\",\r\n        payload: {\r\n            salesData: salesData.data,\r\n        }\r\n    })\r\n}\r\n\r\nexport const updateSalesData = (salesData) => async (dispatch) => {\r\n    //FETCH Axios\r\n\r\n\r\n\r\n    dispatch({\r\n        type: \"UPDATE_SALES_DATA\",\r\n        payload: {\r\n            salesData: {\r\n                shopWiseSales: salesData\r\n            },\r\n        }\r\n    })\r\n}\r\n\r\nexport const saveSales = (payload) => async (dispatch) => {\r\n    //FETCH Axios\r\n    const salesData = await axios.post(postSalesURL(), payload)\r\n\r\n    if (salesData.status == 200) {\r\n        toast.success(\"Data saved successfully\");\r\n    }\r\n    else {\r\n        toast.error(\"Error ! something went wrong.\");\r\n    }\r\n\r\n    let UpdatedsalesData = await axios.post(getSalesURL(payload.shopWiseSales[0].year))\r\n\r\n    dispatch({\r\n        type: \"SAVE_SALES_DATA\",\r\n        payload: {\r\n            salesData: UpdatedsalesData.data,\r\n        }\r\n    })\r\n}","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\components\\modal\\modal.tsx",["132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createStyles, Theme, makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog, { DialogProps } from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport { IconButton, Menu, Typography } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Select from '@material-ui/core/Select';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { loadSales, saveSales, updateSalesData } from './../../store/actions/salesAction';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport NumberFormat from 'react-number-format';\r\n\r\ninterface IProps {\r\n    isModalOpen: boolean;\r\n    handleClose: any;\r\n}\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        head: {\r\n            backgroundColor: theme.palette.action.hover,\r\n            // color: theme.palette.common.white,\r\n            padding: \"6px 6px 6px 6px\",\r\n            border: \"1px solid #cccccc\",\r\n            fontWeight: 400,\r\n            lineHeight: 1.43\r\n        },\r\n        body: {\r\n            fontSize: 14,\r\n            whiteSpace: \"nowrap\",\r\n            padding: \"6px 6px 6px 6px\",\r\n            border: \"1px solid #cccccc\"\r\n\r\n        },\r\n        footer: {\r\n            fontSize: 14,\r\n            color: \"rgba(0, 0, 0, 0.87)\",\r\n            padding: \"6px 6px 6px 6px\",\r\n            border: \"1px solid #cccccc\"\r\n        }\r\n    }),\r\n)(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '&:nth-of-type(even)': {\r\n                backgroundColor: theme.palette.action.hover,\r\n            },\r\n        }\r\n    }),\r\n)(TableRow);\r\n\r\nfunction createData(name: string, jan: number, feb: number, march: number, april: number, may: number, june: number, july: number, aug: number, sep: number, oct: number, nov: number, dec: number) {\r\n    return { name, jan, feb, march, april, may, june, july, aug, sep, oct, nov, dec };\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        table: {\r\n            // minWidth: 700,\r\n        },\r\n        dialogTitle: {\r\n            borderBottom: \"1px solid #dadada\",\r\n            color: \"#444\",\r\n            '& .MuiTypography-h6': {\r\n                fontWeight: \"bold\"\r\n            }\r\n        },\r\n        dialogContent: {\r\n            paddingTop: theme.spacing(3),\r\n            paddingBottom: theme.spacing(3),\r\n        },\r\n        dialogActions: {\r\n            paddingTop: theme.spacing(2),\r\n            paddingBottom: theme.spacing(2),\r\n            paddingLeft: theme.spacing(3),\r\n            paddingRight: theme.spacing(3),\r\n            borderTop: \"1px solid #dadada\"\r\n        },\r\n        primaryButton: {\r\n            backgroundColor: \"rgba(0, 152, 210, 1)\",\r\n            color: \"#FFF\",\r\n            minWidth: 100,\r\n            boxShadow: \"none\",\r\n            '&:hover': {\r\n                backgroundColor: \"rgba(4, 123, 169, 1)\"\r\n            },\r\n        },\r\n        tableInput: {\r\n            '& .MuiInput-root': {\r\n                fontSize: \"0.875rem\",\r\n                '& .MuiInputBase-input': {\r\n                    padding: \"1px 0\",\r\n                    textAlign: \"right\",\r\n                    '&:hover': {\r\n                        backgroundColor: \"rgba(0,0,0,.1)\"\r\n                    },\r\n                    '&:active': {\r\n                        backgroundColor: \"rgba(0,0,0,.1)\"\r\n                    },\r\n                    '&:focus': {\r\n                        backgroundColor: \"rgba(0,0,0,.1)\"\r\n                    }\r\n                }\r\n            },\r\n            '& .MuiInput-underline:after': {\r\n                display: \"none\"\r\n            },\r\n            '& .MuiInput-underline:before': {\r\n                display: \"none\"\r\n            },\r\n            '& .MuiInputAdornment-positionEnd': {\r\n                marginLeft: 1\r\n            },\r\n            '& .MuiTypography-body1': {\r\n                fontSize: \"0.875rem\",\r\n                color: \"rgba(0, 0, 0, 0.87)\",\r\n            }\r\n        },\r\n        yearSelect: {\r\n            color: \"#444\",\r\n            marginLeft: theme.spacing(1),\r\n            '& .MuiSelect-root': {\r\n                fontSize: \"1.25rem\",\r\n                paddingTop: 0,\r\n                paddingBottom: 0,\r\n                fontWeight: \"bold\"\r\n            },\r\n            '&:after': {\r\n                display: \"none\"\r\n            },\r\n            '&:before': {\r\n                display: \"none\"\r\n            },\r\n        }\r\n    }),\r\n);\r\n\r\ninterface NumberFormatCustomProps {\r\n    inputRef: (instance: NumberFormat | null) => void;\r\n    onChange: (event: { target: { name: string; value: string } }) => void;\r\n    name: string;\r\n}\r\n\r\ninterface NumberFormatCustomProps {\r\n    inputRef: (instance: NumberFormat | null) => void;\r\n    onChange: (event: { target: { name: string; value: string } }) => void;\r\n    name: string;\r\n}\r\n\r\nfunction NumberFormatCustom(props: NumberFormatCustomProps) {\r\n    const { inputRef, onChange, ...other } = props;\r\n\r\n    return (\r\n        <NumberFormat\r\n            {...other}\r\n            getInputRef={inputRef}\r\n            onValueChange={(values) => {\r\n                onChange({\r\n                    target: {\r\n                        name: props.name,\r\n                        value: values.value,\r\n                    },\r\n                });\r\n            }}\r\n            thousandSeparator\r\n            isNumericString\r\n        // suffix=\"€\"\r\n        />\r\n    );\r\n}\r\n\r\ninterface State {\r\n    numberformat: string;\r\n}\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\n\r\nexport default function MaxWidthDialog(props: IProps) {\r\n    const classes = useStyles();\r\n    const [year, setYear] = React.useState(new Date().getFullYear());\r\n    const dispatch = useDispatch();\r\n    let arraySalesData: any = {}\r\n    const [salesData, setSalesData] = React.useState(arraySalesData);\r\n\r\n    const handleChangeYear = (event: React.ChangeEvent<{ value: any }>) => {\r\n\r\n        setYear(event.target.value);\r\n        dispatch(loadSales(event.target.value));\r\n\r\n        if (arraySalesData) {\r\n            calculateSalesData(arraySalesData);\r\n        }\r\n    };\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n    const saveRecord = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n\r\n        let updatedArray: any = [];\r\n\r\n        arraySalesData.forEach((item: any) => {\r\n\r\n            let itemobject =\r\n            {\r\n                id: item.id,\r\n                shopNo: item.shopNo,\r\n                shopName: item.shopName,\r\n                year: item.year,\r\n                janSales: item.janSales,\r\n                febSales: item.febSales,\r\n                marSales: item.marSales,\r\n                aprSales: item.aprSales,\r\n                maySales: item.maySales,\r\n                junSales: item.junSales,\r\n                julSales: item.julSales,\r\n                augSales: item.augSales,\r\n                sepSales: item.sepSales,\r\n                octSales: item.octSales,\r\n                novSales: item.novSales,\r\n                decSales: item.decSales\r\n\r\n            }\r\n\r\n            updatedArray.push(itemobject);\r\n\r\n        });\r\n\r\n        let payload =\r\n        {\r\n            shopWiseSales: updatedArray\r\n        }\r\n\r\n        dispatch(saveSales(payload));\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const [values, setValues] = React.useState<State>({\r\n        numberformat: '2000',\r\n    });\r\n\r\n    const handleChangeTableInput = (event: React.ChangeEvent<HTMLInputElement>, col: string, index: any) => {\r\n        \r\n        let changedValue = Number(event.target.value);\r\n        const items = arraySalesData;\r\n        items[index][col] = changedValue;\r\n        arraySalesData = items;\r\n        calculateSalesData(arraySalesData);\r\n\r\n    };\r\n\r\n    function handleOnDragEnd(result: any) {\r\n\r\n        if (!result.destination) return;\r\n\r\n        const items = Array.from(arraySalesData);\r\n\r\n        const reorderedItemDestionation = items[result.destination.index];\r\n        const reorderedItemSource = items[result.source.index];\r\n\r\n        items[result.source.index] = reorderedItemDestionation;\r\n        items[result.destination.index] = reorderedItemSource;\r\n\r\n        arraySalesData = items;\r\n\r\n    }\r\n\r\n    const BindSalesData = ((year: number) => {\r\n\r\n        useEffect(() => {\r\n            dispatch(loadSales(year));\r\n        }, [dispatch]);\r\n\r\n\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        dispatch(updateSalesData(arraySalesData));\r\n    }, [dispatch]);\r\n\r\n\r\n    const calculateSalesData = ((obj: any) => {\r\n        obj.totaljan = 0;\r\n        obj.totalfeb = 0;\r\n        obj.totalmar = 0;\r\n        obj.totalapr = 0;\r\n        obj.totalmay = 0;\r\n        obj.totaljun = 0;\r\n        obj.totaljul = 0;\r\n        obj.totalaug = 0;\r\n        obj.totalsep = 0;\r\n        obj.totaloct = 0;\r\n        obj.totalnov = 0;\r\n        obj.totaldec = 0;\r\n        obj.mainTotal = 0;\r\n\r\n        obj.map((item: any) => {\r\n\r\n            item.total = 0;\r\n\r\n            // shop wise total\r\n            item.total = item.janSales + item.febSales + item.marSales + item.aprSales + item.maySales + item.junSales +\r\n                item.julSales + item.augSales + item.sepSales + item.octSales + item.novSales + item.decSales;\r\n\r\n            // main total\r\n\r\n            obj.mainTotal += item.total;\r\n\r\n            // month wise total\r\n            obj.totaljan += item.janSales;\r\n            obj.totalfeb += item.febSales;\r\n            obj.totalmar += item.marSales;\r\n            obj.totalapr += item.aprSales;\r\n            obj.totalmay += item.maySales;\r\n            obj.totaljun += item.junSales;\r\n            obj.totaljul += item.julSales;\r\n            obj.totalaug += item.augSales;\r\n            obj.totalsep += item.sepSales;\r\n            obj.totaloct += item.octSales;\r\n            obj.totalnov += item.novSales;\r\n            obj.totaldec += item.decSales;\r\n\r\n        })\r\n\r\n        arraySalesData = obj;\r\n\r\n        dispatch(updateSalesData(arraySalesData));\r\n\r\n    });\r\n\r\n\r\n    BindSalesData(year);\r\n\r\n    function formatNumber(parmnumber: number) {\r\n        let x, x1, x2, number: any;\r\n\r\n        number = parmnumber.toFixed(2) + '';\r\n        x = number.split('.');\r\n        x1 = x[0];\r\n        var rgx = /(\\d+)(\\d{3})/;\r\n        while (rgx.test(x1)) {\r\n            x1 = x1.replace(rgx, '$1' + ',' + '$2');\r\n        }\r\n        return x1;\r\n    }\r\n\r\n\r\n    arraySalesData = useSelector((state: any) => state.sales.salesData.shopWiseSales);\r\n\r\n    if (arraySalesData) {\r\n\r\n        calculateSalesData(arraySalesData);\r\n    }\r\n\r\n    arraySalesData = useSelector((state: any) => state.sales.salesData.shopWiseSales);\r\n\r\n    function Alert(props: any) {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <Dialog\r\n                maxWidth=\"lg\"\r\n                open={props.isModalOpen}\r\n                onClose={props.handleClose}\r\n                aria-labelledby=\"max-width-dialog-title\">\r\n\r\n                {/* <Snackbar\r\n                    anchorOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    open={true}\r\n                    autoHideDuration={5}\r\n                    action={\r\n\r\n                        <Alert severity=\"success\">Data saved Successfully </Alert>\r\n\r\n                    }\r\n                /> */}\r\n\r\n                {arraySalesData ?\r\n\r\n                    <div>\r\n\r\n                        <DialogTitle id=\"max-width-dialog-title\" className={classes.dialogTitle}>\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <Typography variant=\"h6\" component=\"h2\">\r\n                                    Objetivos de Venda\r\n                                <Select\r\n                                        labelId=\"demo-simple-select-placeholder-label-label\"\r\n                                        id=\"demo-simple-select-placeholder-label\"\r\n                                        onChange={handleChangeYear}\r\n                                        value={year}\r\n                                        className={classes.yearSelect}\r\n                                        displayEmpty\r\n                                        MenuProps={{\r\n                                            anchorOrigin: {\r\n                                                vertical: \"bottom\",\r\n                                                horizontal: \"left\"\r\n                                            },\r\n                                            transformOrigin: {\r\n                                                vertical: \"top\",\r\n                                                horizontal: \"left\"\r\n                                            },\r\n                                            getContentAnchorEl: null,\r\n                                            PaperProps: {\r\n                                                style: {\r\n                                                    maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP\r\n                                                }\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem value={2022}>2022</MenuItem>\r\n                                        <MenuItem value={2021}>2021</MenuItem>\r\n                                        <MenuItem value={2020}>2020</MenuItem>\r\n                                        <MenuItem value={2019}>2019</MenuItem>\r\n                                        <MenuItem value={2018}>2018</MenuItem>\r\n                                        <MenuItem value={2017}>2017</MenuItem>\r\n                                        <MenuItem value={2016}>2016</MenuItem>\r\n                                    </Select>\r\n                                </Typography>\r\n                                {/* <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" size=\"small\"  onClick={handleClick}>\r\n        <ExpandMoreIcon />\r\n    </IconButton>\r\n    <Menu\r\n        id=\"simple-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleCloseMenu}\r\n        >\r\n        <MenuItem onClick={handleCloseMenu}>2022</MenuItem>\r\n        <MenuItem onClick={handleCloseMenu}>2021</MenuItem>\r\n        <MenuItem onClick={handleCloseMenu}>2020</MenuItem>\r\n    </Menu> */}\r\n                                <IconButton aria-controls=\"simple-menu\" className=\"ml-auto\" aria-haspopup=\"true\" size=\"small\" onClick={props.handleClose}>\r\n                                    <CloseIcon />\r\n                                </IconButton>\r\n                            </div>\r\n                        </DialogTitle>\r\n                        <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                            <Droppable droppableId=\"salesTable\">\r\n                                {(provided) => (\r\n\r\n                                    <DialogContent className={classes.dialogContent}>\r\n                                        <TableContainer className=\"salesTable\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                                            <Table className={classes.table} size=\"small\" aria-label=\"customized table\">\r\n                                                <TableHead>\r\n                                                    <TableRow>\r\n                                                        <StyledTableCell>Loja</StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\">Janeiro</StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\">Fevereiro</StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\">Março</StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\">Abril</StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\">Maio</StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\">Junho</StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\">Julho</StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\">Agosto</StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\">Setembro</StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\">Outubro</StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\">Novembro</StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\">Dezembro</StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\">Total</StyledTableCell>\r\n                                                    </TableRow>\r\n                                                </TableHead>\r\n                                                <TableBody>\r\n                                                    {\r\n\r\n                                                    }\r\n                                                    {arraySalesData.map((row: any, index: any) => (\r\n\r\n                                                        <Draggable key={'row_' + index} draggableId={'row_' + index} index={index}>\r\n                                                            {(provided) => (\r\n\r\n                                                                <StyledTableRow key={row.name} {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\r\n\r\n\r\n                                                                    <StyledTableCell component=\"th\" scope=\"row\">\r\n                                                                        {row.shopName}\r\n                                                                    </StyledTableCell>\r\n\r\n\r\n                                                                    <StyledTableCell align=\"right\">\r\n\r\n                                                                        <TextField\r\n                                                                            defaultValue={formatNumber(row.janSales)}\r\n                                                                            placeholder=\"0\"\r\n                                                                            className={classes.tableInput}\r\n                                                                            InputProps={{\r\n                                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n                                                                            }}\r\n                                                                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChangeTableInput(e, 'janSales', index)}\r\n                                                                        />\r\n                                                                    </StyledTableCell>\r\n                                                                    <StyledTableCell align=\"right\">\r\n                                                                        <TextField\r\n                                                                            defaultValue={formatNumber(row.febSales)}\r\n                                                                            placeholder=\"0\"\r\n                                                                            className={classes.tableInput}\r\n                                                                            InputProps={{\r\n                                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                                            }}\r\n                                                                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChangeTableInput(e, 'febSales', index)}\r\n                                                                        />\r\n                                                                    </StyledTableCell>\r\n                                                                    <StyledTableCell align=\"right\">\r\n                                                                        <TextField\r\n                                                                            defaultValue={formatNumber(row.marSales)}\r\n                                                                            placeholder=\"0\"\r\n                                                                            className={classes.tableInput}\r\n                                                                            InputProps={{\r\n                                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                                            }}\r\n                                                                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChangeTableInput(e, 'marSales', index)}\r\n                                                                        />\r\n                                                                    </StyledTableCell>\r\n                                                                    <StyledTableCell align=\"right\">\r\n                                                                        <TextField\r\n                                                                            defaultValue={formatNumber(row.aprSales)}\r\n                                                                            placeholder=\"0\"\r\n                                                                            className={classes.tableInput}\r\n                                                                            InputProps={{\r\n                                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                                            }}\r\n                                                                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChangeTableInput(e, 'aprSales', index)}\r\n                                                                        />\r\n                                                                    </StyledTableCell>\r\n                                                                    <StyledTableCell align=\"right\">\r\n                                                                        <TextField\r\n                                                                            defaultValue={formatNumber(row.maySales)}\r\n                                                                            placeholder=\"0\"\r\n                                                                            className={classes.tableInput}\r\n                                                                            InputProps={{\r\n                                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                                            }}\r\n                                                                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChangeTableInput(e, 'maySales', index)}\r\n                                                                        />\r\n                                                                    </StyledTableCell>\r\n                                                                    <StyledTableCell align=\"right\">\r\n                                                                        <TextField\r\n                                                                            defaultValue={formatNumber(row.junSales)}\r\n                                                                            placeholder=\"0\"\r\n                                                                            className={classes.tableInput}\r\n                                                                            InputProps={{\r\n                                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                                            }}\r\n                                                                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChangeTableInput(e, 'junSales', index)}\r\n                                                                        />\r\n                                                                    </StyledTableCell>\r\n                                                                    <StyledTableCell align=\"right\">\r\n                                                                        <TextField\r\n                                                                          defaultValue={formatNumber(row.julSales)}\r\n                                                                            placeholder=\"0\"\r\n                                                                            className={classes.tableInput}\r\n                                                                            InputProps={{\r\n                                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                                            }}\r\n                                                                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChangeTableInput(e, 'julSales', index)}\r\n                                                                        />\r\n                                                                    </StyledTableCell>\r\n                                                                    <StyledTableCell align=\"right\">\r\n                                                                        <TextField\r\n                                                                            defaultValue={formatNumber(row.augSales)}\r\n                                                                            placeholder=\"0\"\r\n                                                                            className={classes.tableInput}\r\n                                                                            InputProps={{\r\n                                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                                            }}\r\n                                                                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChangeTableInput(e, 'augSales', index)}\r\n                                                                        />\r\n                                                                    </StyledTableCell>\r\n                                                                    <StyledTableCell align=\"right\">\r\n                                                                        <TextField\r\n                                                                            defaultValue={formatNumber(row.sepSales)}\r\n                                                                            placeholder=\"0\"\r\n                                                                            className={classes.tableInput}\r\n                                                                            InputProps={{\r\n                                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                                            }}\r\n                                                                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChangeTableInput(e, 'sepSales', index)}\r\n                                                                        />\r\n                                                                    </StyledTableCell>\r\n                                                                    <StyledTableCell align=\"right\">\r\n                                                                        <TextField\r\n                                                                            defaultValue={formatNumber(row.octSales)}\r\n                                                                            placeholder=\"0\"\r\n                                                                            className={classes.tableInput}\r\n                                                                            InputProps={{\r\n                                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                                            }}\r\n                                                                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChangeTableInput(e, 'octSales', index)}\r\n                                                                        />\r\n                                                                    </StyledTableCell>\r\n                                                                    <StyledTableCell align=\"right\">\r\n                                                                        <TextField\r\n                                                                            defaultValue={formatNumber(row.novSales)}\r\n                                                                            placeholder=\"0\"\r\n                                                                            className={classes.tableInput}\r\n                                                                            InputProps={{\r\n                                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                                            }}\r\n                                                                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChangeTableInput(e, 'novSales', index)}\r\n                                                                        />\r\n                                                                    </StyledTableCell>\r\n                                                                    <StyledTableCell align=\"right\">\r\n                                                                        <TextField\r\n                                                                            defaultValue={formatNumber(row.decSales)}\r\n                                                                            placeholder=\"0\"\r\n                                                                            className={classes.tableInput}\r\n                                                                            InputProps={{\r\n                                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                                            }}\r\n                                                                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChangeTableInput(e, 'decSales', index)}\r\n                                                                        />\r\n                                                                    </StyledTableCell>\r\n                                                                    <StyledTableCell align=\"right\">\r\n\r\n\r\n                                                                        <TextField disabled\r\n                                                                            defaultValue={formatNumber(row.total)}\r\n                                                                            placeholder=\"0\"\r\n                                                                            className={classes.tableInput}\r\n                                                                            InputProps={{\r\n                                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                                            }}\r\n                                                                        />\r\n\r\n                                                                    </StyledTableCell>\r\n\r\n                                                                </StyledTableRow>\r\n\r\n\r\n                                                            )}\r\n\r\n\r\n                                                        </Draggable>\r\n                                                    ))}\r\n                                                    {provided.placeholder}\r\n                                                </TableBody>\r\n                                                <TableFooter>\r\n                                                    <StyledTableRow>\r\n                                                        <StyledTableCell component=\"th\" scope=\"row\">Total</StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\">\r\n                                                            <TextField\r\n\r\n                                                                disabled\r\n                                                                // defaultValue={row.dec}\r\n                                                                defaultValue={formatNumber(arraySalesData.totaljan)}\r\n                                                                placeholder=\"0\"\r\n                                                                className={classes.tableInput}\r\n                                                                InputProps={{\r\n                                                                    endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                                }}\r\n                                                            />\r\n                                                        </StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\"><TextField\r\n                                                            disabled\r\n                                                            \r\n                                                            defaultValue={formatNumber(arraySalesData.totalfeb)}\r\n                                                            \r\n                                                            placeholder=\"0\"\r\n                                                            className={classes.tableInput}\r\n                                                            InputProps={{\r\n                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                            }}\r\n\r\n                                                        /></StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\"> <TextField\r\n                                                            disabled\r\n                                                            defaultValue={formatNumber(arraySalesData.totalmar)}\r\n                                                            placeholder=\"0\"\r\n                                                            className={classes.tableInput}\r\n                                                            InputProps={{\r\n                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                            }}\r\n\r\n                                                        /></StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\"><TextField\r\n                                                            disabled\r\n                                                            defaultValue={formatNumber(arraySalesData.totalapr)}\r\n                                                            placeholder=\"0\"\r\n                                                            className={classes.tableInput}\r\n                                                            InputProps={{\r\n                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                            }}\r\n                                                        /></StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\"><TextField\r\n                                                            disabled\r\n                                                            defaultValue={formatNumber(arraySalesData.totalmay)}\r\n                                                            placeholder=\"0\"\r\n                                                            className={classes.tableInput}\r\n                                                            InputProps={{\r\n                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                            }}\r\n                                                        /></StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\"><TextField\r\n                                                            disabled\r\n                                                            defaultValue={formatNumber(arraySalesData.totaljun)}\r\n                                                            placeholder=\"0\"\r\n                                                            className={classes.tableInput}\r\n                                                            InputProps={{\r\n                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                            }}\r\n                                                        /></StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\"><TextField\r\n                                                            disabled\r\n                                                            defaultValue={formatNumber(arraySalesData.totaljul)}\r\n                                                            placeholder=\"0\"\r\n                                                            className={classes.tableInput}\r\n                                                            InputProps={{\r\n                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                            }}\r\n\r\n                                                        /></StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\"><TextField\r\n                                                            disabled\r\n                                                            defaultValue={formatNumber(arraySalesData.totalaug)}\r\n                                                            placeholder=\"0\"\r\n                                                            className={classes.tableInput}\r\n                                                            InputProps={{\r\n                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                            }}\r\n                                                        /></StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\"><TextField\r\n                                                            disabled\r\n                                                            defaultValue={formatNumber(arraySalesData.totalsep)}\r\n                                                            placeholder=\"0\"\r\n                                                            className={classes.tableInput}\r\n                                                            InputProps={{\r\n                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                            }}\r\n\r\n                                                        /></StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\"><TextField\r\n                                                            disabled\r\n                                                            defaultValue={formatNumber(arraySalesData.totaloct)}\r\n                                                            placeholder=\"0\"\r\n                                                            className={classes.tableInput}\r\n                                                            InputProps={{\r\n                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                            }}\r\n\r\n                                                        /></StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\"><TextField\r\n                                                            disabled\r\n                                                            defaultValue={formatNumber(arraySalesData.totalnov)}\r\n                                                            placeholder=\"0\"\r\n                                                            className={classes.tableInput}\r\n                                                            InputProps={{\r\n                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                            }}\r\n\r\n                                                        /></StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\"><TextField\r\n                                                            disabled\r\n                                                            defaultValue={formatNumber(arraySalesData.totaldec)}\r\n                                                            placeholder=\"0\"\r\n                                                            className={classes.tableInput}\r\n                                                            InputProps={{\r\n                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                            }}\r\n\r\n                                                        /></StyledTableCell>\r\n                                                        <StyledTableCell align=\"right\"><TextField\r\n                                                            disabled\r\n                                                            // defaultValue={row.dec}\r\n                                                            defaultValue={arraySalesData.mainTotal}\r\n                                                            placeholder=\"0\"\r\n                                                            className={classes.tableInput}\r\n                                                            InputProps={{\r\n                                                                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n\r\n                                                            }}\r\n                                                        /></StyledTableCell>\r\n                                                    </StyledTableRow>\r\n                                                </TableFooter>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </DialogContent>\r\n\r\n                                )}\r\n\r\n\r\n\r\n                            </Droppable>\r\n                        </DragDropContext>\r\n\r\n                        <DialogActions className={classes.dialogActions}>\r\n                            <Button onClick={saveRecord} className={`${classes.primaryButton}`} color=\"primary\" variant=\"contained\" size=\"small\">Gravar</Button>\r\n                        </DialogActions>\r\n                    </div>\r\n\r\n\r\n                    :\r\n                    <label>Loading</label>\r\n\r\n                }\r\n\r\n\r\n\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\components\\charts\\chart.tsx",["153","154","155"],"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n//OUTSIDE COMPONENTS\r\nimport { ChartType } from \"chart.js\";\r\n\r\n//INSIDE COMPONENTS´\r\nimport LineChart from \"./typeCharts/lineChart\";\r\nimport DoughnutChart from \"./typeCharts/doughnutChart\"\r\nimport BarChart, { BarChartProps } from \"./typeCharts/barChart\";\r\n\r\n//CSS\r\n\r\n//TYPES IMPORTS\r\nimport { LineChartProps as LineProps } from \"./typeCharts/lineChart\";\r\nimport { DoughnutChartProps as DoughnutProps } from \"./typeCharts/doughnutChart\"\r\n\r\nexport interface MainChartProps extends LineProps, DoughnutProps,BarChartProps {\r\n    typeOfChart?: ChartType | string;\r\n    children?: any;\r\n    chartClasses?: string;\r\n}\r\n\r\nconst MainChart = ({ typeOfChart,\r\n    xAxisData,\r\n    //labelsXAxis,\r\n    data,\r\n    chartLabels,\r\n    firstLabelData,\r\n    firstBorderColorData,\r\n    firstBackgroundColorData,\r\n    firstData,\r\n    secondLabelData,\r\n    secondBorderColorData,\r\n    secondBackgroundColorData,\r\n    secondData,\r\n    thirdLabelData,\r\n    thirdBorderColorData,\r\n    thirdBackgroundColorData,\r\n    thirdData,\r\n    fourthLabelData,\r\n    fourthBorderColorData,\r\n    fourthBackgroundColorData,\r\n    fourthData,\r\n    fifthLabelData,\r\n    fifthBorderColorData,\r\n    fifthBackgroundColorData,\r\n    fifthData,\r\n    xAxisType,\r\n    legendDisplay,\r\n    dateFrom,\r\n    dateTo,\r\n    tooltipCallback,\r\n    yAxesTicksMin,\r\n    yAxesTicksMax,\r\n    customTooltip,\r\n    yAxesTicksCallback,\r\n    yAxesStepSize,\r\n    hidden = false,\r\n    chartClasses,\r\n}: MainChartProps) => {\r\n\r\n    return (\r\n        <div className={`chart-container ${chartClasses} `}>\r\n            {(() => {\r\n                switch (typeOfChart) {\r\n                    case undefined:\r\n                        return <p>UNDEFINED !!! (WAITING FOR A EMPTY STATE)</p>\r\n                        case \"bar\":\r\n                            return <BarChart\r\n                                xAxisData={xAxisData}\r\n                                //labelsXAxis={labelsXAxis}\r\n                                firstLabelData={firstLabelData}\r\n                                firstBorderColorData={firstBorderColorData}\r\n                                firstBackgroundColorData={firstBackgroundColorData}\r\n                                firstData={firstData}\r\n                                secondLabelData={secondLabelData}\r\n                                secondBorderColorData={secondBorderColorData}\r\n                                secondBackgroundColorData={secondBackgroundColorData}\r\n                                secondData={secondData}\r\n                                thirdLabelData={thirdLabelData}\r\n                                thirdBorderColorData={thirdBorderColorData}\r\n                                thirdBackgroundColorData={thirdBackgroundColorData}\r\n                                thirdData={thirdData}\r\n                                fourthLabelData={fourthLabelData}\r\n                                fourthBorderColorData={fourthBorderColorData}\r\n                                fourthBackgroundColorData={fourthBackgroundColorData}\r\n                                fourthData={fourthData}\r\n                                fifthLabelData={fifthLabelData}\r\n                                fifthBorderColorData={fifthBorderColorData}\r\n                                fifthBackgroundColorData={fifthBackgroundColorData}\r\n                                fifthData={fifthData}\r\n                                xAxisType={xAxisType}\r\n                                legendDisplay={legendDisplay}\r\n                                dateFrom={dateFrom}\r\n                                dateTo={dateTo}\r\n                                data={data}\r\n                                chartLabels={chartLabels}\r\n                                //customTooltip={customTooltip}\r\n                                tooltipCallback={tooltipCallback}\r\n                                yAxesTicksMin={yAxesTicksMin}\r\n                                yAxesTicksMax={yAxesTicksMax}\r\n                                yAxesTicksCallback={yAxesTicksCallback}\r\n                                yAxesStepSize={yAxesStepSize}\r\n                                hidden={hidden}\r\n                            ></BarChart>\r\n                    case \"line\":\r\n                        return <LineChart\r\n                            xAxisData={xAxisData}\r\n                            //labelsXAxis={labelsXAxis}\r\n                            firstLabelData={firstLabelData}\r\n                            firstBorderColorData={firstBorderColorData}\r\n                            firstBackgroundColorData={firstBackgroundColorData}\r\n                            firstData={firstData}\r\n                            secondLabelData={secondLabelData}\r\n                            secondBorderColorData={secondBorderColorData}\r\n                            secondBackgroundColorData={secondBackgroundColorData}\r\n                            secondData={secondData}\r\n                            thirdLabelData={thirdLabelData}\r\n                            thirdBorderColorData={thirdBorderColorData}\r\n                            thirdBackgroundColorData={thirdBackgroundColorData}\r\n                            thirdData={thirdData}\r\n                            fourthLabelData={fourthLabelData}\r\n                            fourthBorderColorData={fourthBorderColorData}\r\n                            fourthBackgroundColorData={fourthBackgroundColorData}\r\n                            fourthData={fourthData}\r\n                            fifthLabelData={fifthLabelData}\r\n                            fifthBorderColorData={fifthBorderColorData}\r\n                            fifthBackgroundColorData={fifthBackgroundColorData}\r\n                            fifthData={fifthData}\r\n                            xAxisType={xAxisType}\r\n                            legendDisplay={legendDisplay}\r\n                            dateFrom={dateFrom}\r\n                            dateTo={dateTo}\r\n                            //customTooltip={customTooltip}\r\n                            tooltipCallback={tooltipCallback}\r\n                            yAxesTicksMin={yAxesTicksMin}\r\n                            yAxesTicksMax={yAxesTicksMax}\r\n                            yAxesTicksCallback={yAxesTicksCallback}\r\n                            yAxesStepSize={yAxesStepSize}\r\n                            hidden={hidden}\r\n                        ></LineChart>\r\n                    case \"doughnut\":\r\n                        return <DoughnutChart\r\n                            chartLabels={chartLabels}\r\n                            firstLabelData={firstLabelData}\r\n                            firstBorderColorData={firstBorderColorData}\r\n                            firstBackgroundColorData={firstBackgroundColorData}\r\n                            firstData={firstData}\r\n                            customTooltip={customTooltip}\r\n                            tooltipCallback={tooltipCallback}\r\n                        ></DoughnutChart>\r\n                    default:\r\n                        return <p>No Chart</p>\r\n                }\r\n            })()}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainChart;\r\n","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\store\\reducers\\salesReducer.js",[],"D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\components\\charts\\typeCharts\\lineChart.tsx",["156","157","158","159","160"],"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n//OUTSIDE COMPONENTS\r\nimport moment, { Moment } from 'moment';\r\nimport 'moment/locale/pt';\r\nimport 'moment/locale/en-gb'\r\nimport Chartjs, { ChartTooltipModel } from \"chart.js\";\r\nimport 'hammerjs';\r\nimport { PluginServiceRegistrationOptions, ChartColor, Scriptable, ChartPoint, ChartTooltipCallback, ChartLegendLabelItem, ChartData } from \"chart.js\";\r\nimport zoom from 'chartjs-plugin-zoom';\r\n\r\nexport interface LineChartProps {\r\n\tpluginOfChart?: PluginServiceRegistrationOptions[],\r\n\txAxisData?: number | string | Date | Moment,\r\n\r\n\t//labelsXAxis?: (string | TFunctionResult | undefined | number | Date | Moment | number[] | string[] | Date[] | Moment[])[] | undefined,\r\n\r\n\tfirstLabelData?: string,\r\n\tfirstBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfirstBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfirstData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\tsecondLabelData?: string,\r\n\tsecondBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tsecondBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tsecondData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\tthirdLabelData?: string,\r\n\tthirdBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tthirdBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tthirdData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\tfourthLabelData?: string,\r\n\tfourthBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfourthBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfourthData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\tfifthLabelData?: string,\r\n\tfifthBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfifthBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfifthData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\txAxisType?: string,\r\n\r\n\tlegendDisplay?: boolean\r\n\r\n\tdateFrom?: string,\r\n\tdateTo?: string,\r\n\r\n\ttooltipCallback?: ChartTooltipCallback,\r\n\t//customTooltip?: ((tooltipModel: ChartTooltipModel) => void) | undefined,\r\n\r\n\tyAxesTicksMin?: number,\r\n\tyAxesTicksMax?: number,\r\n\r\n\tyAxesTicksCallback?: (\r\n\t\tvalue: string | number,\r\n\t\tindex: number,\r\n\t\tvalues: number[] | string[]\r\n\t) => string | number | null | undefined;\r\n\r\n\tyAxesStepSize?: number\r\n\thidden?: boolean\r\n}\r\n\r\nconst LineChart = ({\r\n\tpluginOfChart,\r\n\txAxisData,\r\n\t//labelsXAxis,\r\n\tfirstLabelData,\r\n\tfirstBorderColorData,\r\n\tfirstBackgroundColorData,\r\n\tfirstData,\r\n\tsecondLabelData,\r\n\tsecondBorderColorData,\r\n\tsecondBackgroundColorData,\r\n\tsecondData,\r\n\tthirdLabelData,\r\n\tthirdBorderColorData,\r\n\tthirdBackgroundColorData,\r\n\tthirdData,\r\n\tfourthLabelData,\r\n\tfourthBorderColorData,\r\n\tfourthBackgroundColorData,\r\n\tfourthData,\r\n\tfifthLabelData,\r\n\tfifthBorderColorData,\r\n\tfifthBackgroundColorData,\r\n\tfifthData,\r\n\txAxisType,\r\n\tlegendDisplay,\r\n\tdateFrom,\r\n\tdateTo,\r\n\t//customTooltip,\r\n\ttooltipCallback,\r\n\tyAxesTicksMin,\r\n\tyAxesTicksMax,\r\n\tyAxesTicksCallback,\r\n\tyAxesStepSize = 1,\r\n\thidden = false\r\n}: LineChartProps) => {\r\n\t// initialise with null, but tell TypeScript we are looking for an HTMLCanvasElement\r\n\tconst chartContainer = useRef<HTMLCanvasElement>(null);\r\n\tconst [chartInstance, setChartInstance] = useState<Chart | null>();\r\n\tconst [zoomOn, setZoomOn] = useState(false);\r\n\tconst chartConfig = {\r\n\t\ttype: \"line\",\r\n\t\tlabels: ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul'],\r\n\t\tmaintainAspectRatio: false,\r\n\t\tdata: {\r\n\t\t\tx: xAxisData as number | string | Date | Moment,\r\n\t\t\tdatasets: [{\r\n\t\t\t\tlabel: firstLabelData as string,\r\n\t\t\t\tfill: false,\r\n\t\t\t\tlineTension: 0.2,\r\n\t\t\t\tborderColor: firstBorderColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tbackgroundColor: firstBackgroundColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tborderWidth: 1,\r\n\t\t\t\tpointHitRadius: 10,\r\n\t\t\t\tdata: firstData as Array<number | null | undefined> | ChartPoint[]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tlabel: secondLabelData as string,\r\n\t\t\t\tfill: false,\r\n\t\t\t\tlineTension: 0.2,\r\n\t\t\t\tborderColor: secondBorderColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tbackgroundColor: secondBackgroundColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tborderWidth: 1,\r\n\t\t\t\tpointHitRadius: 10,\r\n\t\t\t\tdata: secondData as Array<number | null | undefined> | ChartPoint[]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tlabel: thirdLabelData as string,\r\n\t\t\t\tfill: false,\r\n\t\t\t\tlineTension: 0.2,\r\n\t\t\t\tborderColor: thirdBorderColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tbackgroundColor: thirdBackgroundColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tborderWidth: 1,\r\n\t\t\t\tpointHitRadius: 10,\r\n\t\t\t\tdata: thirdData as Array<number | null | undefined> | ChartPoint[]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tlabel: fourthLabelData as string,\r\n\t\t\t\tfill: false,\r\n\t\t\t\tlineTension: 0.2,\r\n\t\t\t\tborderColor: fourthBorderColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tbackgroundColor: fourthBackgroundColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tborderWidth: 1,\r\n\t\t\t\tpointHitRadius: 10,\r\n\t\t\t\tdata: fourthData as Array<number | null | undefined> | ChartPoint[]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tlabel: fifthLabelData as string,\r\n\t\t\t\tfill: false,\r\n\t\t\t\tlineTension: 0.2,\r\n\t\t\t\tborderColor: fifthBorderColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tbackgroundColor: fifthBackgroundColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tborderWidth: 1,\r\n\t\t\t\tpointHitRadius: 10,\r\n\t\t\t\tdata: fifthData as Array<number | null | undefined> | ChartPoint[]\r\n\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t\toptions: {\r\n\t\t\tlegend: {\r\n\t\t\t\tdisplay: legendDisplay as boolean,\r\n\t\t\t\tposition: 'bottom' as \"bottom\" | \"left\" | \"right\" | \"top\" | \"chartArea\" | undefined,\r\n\t\t\t\tlabels: {\r\n\t\t\t\t\tfontSize: 10,\r\n\t\t\t\t\tboxWidth: 20,\r\n\t\t\t\t\tfilter: function (item: ChartLegendLabelItem, chart: ChartData) {\r\n\t\t\t\t\t\tif (item.text != undefined) {\r\n\t\t\t\t\t\t\treturn !item.text.includes('null');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\ttooltips: {\r\n\t\t\t\tenabled: true,\r\n\t\t\t\t//custom: customTooltip as ((tooltipModel: ChartTooltipModel) => void) | undefined,\r\n\t\t\t\tmode: 'index' as \"label\" | \"index\" | \"x\" | \"point\" | \"nearest\" | \"single\" | \"x-axis\" | \"dataset\" | \"y\" | undefined,\r\n\t\t\t\tcallbacks: tooltipCallback as ChartTooltipCallback,\r\n\t\t\t\tfooterFontStyle: 'normal'\r\n\t\t\t},\r\n\t\t\tpan: {\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tmode: 'x'\r\n\t\t\t},\r\n\t\t\tzoom: {\r\n\t\t\t\tenabled: zoomOn,\r\n\t\t\t\tmode: 'x'\r\n\t\t\t},\r\n\t\t\tresponsive: false,\r\n          \tmaintainAspectRatio: true,\r\n\t\t\tevents: ['click'],\r\n\r\n\t\t\tscales: {\r\n\t\t\t\txAxes: [{\r\n\t\t\t\t\ttype: xAxisType as string,\r\n\t\t\t\t\tborderWidth: 1,\r\n\t\t\t\t\tticks: {\r\n\t\t\t\t\t\tautoSkip: true,\r\n\t\t\t\t\t\tmaxTicksLimit: 20,\r\n\t\t\t\t\t\tfontSize: 10,\r\n\t\t\t\t\t\tcallback: function(value: string) {\r\n\t\t\t\t\t\t\tif(value.length > 10){\r\n\t\t\t\t\t\t\t\treturn value.slice(0, 10) + \"...\"\r\n\t\t\t\t\t\t \t} else {\r\n\t\t\t\t\t\t \t\treturn value\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t \t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tgridLines: {\r\n\t\t\t\t\t\tlineWidth: 1,\r\n\t\t\t\t\t\tcolor: 'rgba(0, 0, 0, 0.12)',\r\n\t\t\t\t\t\tzeroLineWidth: 1,\r\n\t\t\t\t\t\tzeroLineColor: 'rgba(0, 0, 0, 0.12)'\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttime: {\r\n\t\t\t\t\t\tparse: 'DD/MM/YYYY',\r\n\t\t\t\t\t\ttooltipFormat: 'DD MMM',\r\n\t\t\t\t\t\tdisplayFormats: {\r\n\t\t\t\t\t\t\t'day': 'DD MMM',\r\n\t\t\t\t\t\t\t'minute': 'DD MMM',\r\n\t\t\t\t\t\t\t'hour': 'DD MMM',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tunit: 'day' as \"day\" | \"millisecond\" | \"second\" | \"minute\" | \"hour\" | \"week\" | \"month\" | \"quarter\" | \"year\" | undefined,\r\n\t\t\t\t\t\tmin: dateFrom as string,\r\n\t\t\t\t\t\tmax: dateTo as string\r\n\t\t\t\t\t}\r\n\t\t\t\t}],\r\n\r\n\t\t\t\tyAxes: [{\r\n\t\t\t\t\tborderWidth: 1,\r\n\t\t\t\t\tticks: {\r\n\t\t\t\t\t\tmin: yAxesTicksMin as number,//-0.1,\r\n\t\t\t\t\t\tmax: yAxesTicksMax as number,\r\n\t\t\t\t\t\tstepSize: yAxesStepSize,\r\n\t\t\t\t\t\tfontSize: 10,\r\n\t\t\t\t\t\tcallback: yAxesTicksCallback as (\r\n\t\t\t\t\t\t\tvalue: string | number,\r\n\t\t\t\t\t\t\tindex: number,\r\n\t\t\t\t\t\t\tvalues: number[] | string[]\r\n\t\t\t\t\t\t) => string | number | null | undefined\r\n\t\t\t\t\t},\r\n\t\t\t\t\tgridLines: {\r\n\t\t\t\t\t\tlineWidth: 1,\r\n\t\t\t\t\t\tcolor: 'rgba(0, 0, 0, 0.12)',\r\n\t\t\t\t\t\tzeroLineWidth: 1,\r\n\t\t\t\t\t\tzeroLineColor: 'rgba(0, 0, 0, 0.12)'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tscaleLabel: {\r\n\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\tlabelString: 'Value'\r\n\t\t\t\t\t}\r\n\t\t\t\t}],\r\n\t\t\t},\r\n\t\t},\r\n\t\tplugins: pluginOfChart as PluginServiceRegistrationOptions[],\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tlet language: string;\r\n\t\tlanguage = localStorage.getItem(\"i18nextLng\") || \"pt\";\r\n\t\tif (language.length > 2) {\r\n\t\t\tlanguage = language.substr(0, 2).toUpperCase();\r\n\t\t}\r\n\t\tmoment.locale(language)\r\n\r\n\t\tChartjs.plugins.register(zoom);\r\n\r\n\t\t// strict null checks need us to check if chartContainer and current exist.\r\n\t\t// but once current exists, it is of type HTMLCanvasElement\r\n\t\tif (chartContainer && chartContainer.current) {\r\n\t\t\tconst newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n\t\t\tsetChartInstance(newChartInstance);\r\n\t\t}\r\n\t}, [dateTo, dateFrom, firstData]);\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<canvas hidden={hidden} ref={chartContainer} height=\"210px\" className=\"chart\" />\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default LineChart;\r\n","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\services\\F3M\\header-service.js",["161","162"],"import axios from 'axios';\r\nimport { isDefined, searchParams } from '../../shared/helpers/utils';\r\nimport { serverErrors } from '../../shared/helpers/constants';\r\n\r\nimport {\r\n    getMenuURL,\r\n    getFavouriteMenuURL,\r\n    getHomePageMenuURL,\r\n    addFavouriteMenuURL,\r\n    removeFavouriteMenuURL,\r\n    addHomePageMenuURL,\r\n    removeHomePageMenuURL,\r\n} from './../../api';\r\n\r\n\r\nconst replace = require('key-value-replace');\r\n\r\n/**\r\n * Handles the pop up that is lauched by a request that doesn´t have access to option\r\n */\r\nconst openPopUpWithoutAccessToOptions = (controllerName) => {\r\n  const tab = searchParams('tab');\r\n  const iframe = window.parent.document.getElementById('F3M_iFrame_F3M_Tab_' + tab);\r\n  const url =  `../Prisma/Dashboard/${controllerName}/Index?link=1&tab=${tab}`;\r\n  \r\n  iframe?.setAttribute('src', url);\r\n};\r\n\r\n/**\r\n * Handles the pop up login that is lauched by a request that has expired cookie\r\n */\r\nconst openPopUpWithLogin = () => {\r\n  eval(\"window.parent.UtilsDesenhaPopupLogin({},'/F3M/administracao/Autentica/Login?popuplogin=popup', null, null, ['close'], 440, 360, null);\");\r\n  eval(`window.parent.UtilsFechaTabAtiva();`);\r\n};\r\n\r\nconst HeaderService = {\r\n\r\n    getMenu: async (idMenu, controllerName) => {\r\n        const endpoint = getMenuURL();\r\n        const url = replace(endpoint,{ idMenu }, [':', ':']);\r\n        \r\n        const response = await axios.get(url).catch(error => {\r\n            return error.response;\r\n        });;\r\n\r\n        const serverError =\r\n            !isDefined(response) ||\r\n            response.status === 400 ||\r\n            response.status === 404 ||\r\n            response.status === 415 ||\r\n            response.status === 500 ||\r\n            response.status === 401 ||\r\n            response.status === 403;\r\n        \r\n        const { applicationMessages } = response.data;\r\n    \r\n        if (serverError) {\r\n            if (isDefined(applicationMessages)) {\r\n                let errorKey = applicationMessages[0];\r\n\r\n                if(errorKey === serverErrors.SEM_ACESSO_OPCAO_POR_LICENCIAMENTO || errorKey === serverErrors.SEM_AUTENTICACAO || errorKey === serverErrors.SEM_ACESSO_OPCAO)\r\n                    openPopUpWithoutAccessToOptions(controllerName);\r\n                else if(errorKey === serverErrors.COOKIE_EXPIROU)\r\n                    openPopUpWithLogin();\r\n            }\r\n            return null;\r\n        }\r\n    \r\n        return response;\r\n    },\r\n    getFavouriteMenu: async idMenu => {\r\n        const url = replace(getFavouriteMenuURL(),{ idMenu }, [':', ':']);\r\n\r\n        const response = await axios.get(url);\r\n\r\n        return response.data;\r\n    },\r\n    getHomePageMenu: async idMenu => {\r\n        const url = replace(getHomePageMenuURL(),{ idMenu }, [':', ':']);\r\n\r\n        const response = await axios.get(url);\r\n\r\n        return response.data;\r\n    },\r\n    addFavouriteMenu: async objFavourite => {\r\n        const response = await axios.post(addFavouriteMenuURL(), objFavourite)\r\n\r\n        return response.data;\r\n    },\r\n    removeFavouriteMenu: async inIDOpcao => {\r\n        const response = await axios.post(removeFavouriteMenuURL(), { inIDOpcao })\r\n\r\n        return response.data;\r\n    },\r\n    addHomePageMenu: async inIDOpcao => {\r\n        const response = await axios.post(addHomePageMenuURL(), { inIDOpcao })\r\n\r\n        return response.data;\r\n    },\r\n    removeHomePageMenu: async inIDOpcao => {\r\n        const response = await axios.post(removeHomePageMenuURL(), { inIDOpcao })\r\n\r\n        return response.data;\r\n    },\r\n};\r\n\r\nexport default HeaderService;",["163","164"],"D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\shared\\helpers\\encrypt.ts",[],"D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\shared\\helpers\\utils.ts",["165"],"import { encrypt, decrypt } from './encrypt';\r\n\r\nexport const isDefined = (v: any) => v !== undefined && v !== null;\r\n\r\nexport const stringToBool = (v: string) => Boolean(v !== undefined && v != null && v != '' && v.toUpperCase() === 'TRUE');\r\n\r\nexport const clone = (v: any) => JSON.parse(JSON.stringify(v));\r\n\r\nexport const firstElemOf = (array: any[]) => array[0];\r\n\r\nexport const lastElemOf = (array: any[]) => array[array.length - 1];\r\n\r\nexport const isEmpty = (v: any[]) => isDefined(v) && !v.length;\r\n\r\nexport const searchParams = (v: string) => new URLSearchParams(window.location.href).get(v);\r\n\r\nexport const fileExtensionOf = (v: string) => lastElemOf(v.split('.')).toLowerCase();\r\n\r\nexport const newOrdinalArrayOf = (v: number) => Array.from(Array(v), (_, i) => i + 1);\r\n\r\nexport const setLocalStorage = (n: string, v: any) =>\r\n  localStorage.setItem(n, encrypt(JSON.stringify(v)));\r\n\r\nexport const getLocalStorage = (n: string, d: any) =>\r\n  isDefined(localStorage.getItem(n)) ? JSON.parse(decrypt(localStorage.getItem(n))) : d;\r\n\r\nexport const getFileExtension = (n: string) => {\r\n  const parts = n.split('.');\r\n  return parts.pop()?.toLowerCase();\r\n}\r\n","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\components\\charts\\typeCharts\\doughnutChart.tsx",["166","167","168","169"],"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n//OUTSIDE COMPONENTS\r\nimport moment from 'moment';\r\nimport 'moment/locale/pt';\r\nimport 'moment/locale/en-gb'\r\nimport Chartjs, { ChartTooltipModel } from \"chart.js\";\r\nimport 'hammerjs';\r\nimport { PluginServiceRegistrationOptions, ChartColor, Scriptable, ChartPoint, ChartTooltipCallback, ChartLegendLabelItem, ChartData } from \"chart.js\";\r\nimport zoom from 'chartjs-plugin-zoom';\r\n\r\nexport interface DoughnutChartProps {\r\n\tpluginOfChart?: PluginServiceRegistrationOptions[],\r\n\r\n\tchartLabels?: any,\r\n\r\n\txStacked?: boolean,\r\n\tyStacked?: boolean,\r\n\r\n\tfirstLabelData?: string,\r\n\tfirstBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfirstBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfirstData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\tlegendDisplay?: boolean,\r\n\r\n\tdateFrom?: string,\r\n\tdateTo?: string,\r\n\r\n\ttooltipCallback?: ChartTooltipCallback,\r\n\tcustomTooltip?: ((tooltipModel: ChartTooltipModel) => void) | undefined,\r\n\r\n\tyAxesTicksMin?: number,\r\n\tyAxesTicksMax?: number,\r\n\r\n\tyAxesTicksCallback?: (\r\n\t\tvalue: string | number,\r\n\t\tindex: number,\r\n\t\tvalues: number[] | string[]\r\n\t) => string | number | null | undefined;\r\n\r\n\tyAxesStepSize?: number\r\n\thidden?: boolean\r\n}\r\n\r\nconst DoughnutChart = ({\r\n\tchartLabels,\r\n\tfirstBorderColorData,\r\n\tfirstBackgroundColorData,\r\n\tfirstData,\r\n\ttooltipCallback,\r\n\tlegendDisplay,\r\n\tcustomTooltip,\r\n}: DoughnutChartProps) => {\r\n\t// initialise with null, but tell TypeScript we are looking for an HTMLCanvasElement\r\n\tconst chartContainer = useRef<HTMLCanvasElement>(null);\r\n\tconst [width, setWidth] = useState(window.innerWidth);\r\n\tconst [chartInstance, setChartInstance] = useState<Chart | null>();\r\n\r\n\tconst updateWindowDimensions = () => {\r\n\t\tsetWidth(window.innerWidth)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tlet language: string;\r\n\t\tlanguage = localStorage.getItem(\"i18nextLng\") || \"pt\";\r\n\t\tif (language.length > 2) {\r\n\t\t\tlanguage = language.substr(0, 2).toUpperCase();\r\n\t\t}\r\n\t\tmoment.locale(language)\r\n\r\n\t\tChartjs.plugins.register(zoom);\r\n\r\n\t\tupdateWindowDimensions();\r\n\r\n\t\tconst chartConfig = {\r\n\t\t\ttype: \"doughnut\",\r\n\t\t\tdata: {\r\n\t\t\t\tlabels: chartLabels as any,\r\n\t\t\t\tdatasets: [{\r\n\t\t\t\t\tlabel: '# of Tomatoes',\r\n\t\t\t\t\tdata: firstData as Array<number | null | undefined> | ChartPoint[],\r\n\t\t\t\t\tbackgroundColor: firstBackgroundColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\t\tborderColor: firstBorderColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\t\tborderWidth: 1\r\n\t\t\t\t}],\r\n\t\t\t},\r\n\t\t\toptions: {\r\n\t\t\t\tresponsive: true,\r\n          \t\tmaintainAspectRatio: false,\r\n\t\t\t\tcutoutPercentage: 60,\r\n\t\t\t\ttooltips: {\r\n\t\t\t\t\tenabled: true,\r\n\t\t\t\t\tcustom: customTooltip as ((tooltipModel: ChartTooltipModel) => void) | undefined,\r\n\t\t\t\t\tmode: 'index' as \"label\" | \"index\" | \"x\" | \"point\" | \"nearest\" | \"single\" | \"x-axis\" | \"dataset\" | \"y\" | undefined,\r\n\t\t\t\t\tcallbacks: tooltipCallback as ChartTooltipCallback,\r\n\t\t\t\t\tfooterFontStyle: 'normal'\r\n\t\t\t\t},\r\n\t\t\t\tlegend: {\r\n\t\t\t\t\tdisplay: legendDisplay as boolean,\r\n\t\t\t\t\tposition: \"bottom\" as \"bottom\" | \"left\" | \"right\" | \"top\" | \"chartArea\" | undefined,\r\n\t\t\t\t\tlabels: {\r\n\t\t\t\t\t\tfontColor: \"#494949\",\r\n\t\t\t\t\t\tfontSize: 13,\r\n\t\t\t\t\t\tpadding: 15,\r\n\t\t\t\t\t\tboxWidth: 12.5,\r\n\t\t\t\t\t\tfilter: function (item: ChartLegendLabelItem, chart: ChartData) {\r\n\t\t\t\t\t\t\tif (item.text != undefined) {\r\n\t\t\t\t\t\t\t\treturn !item.text.includes('null');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t};\r\n\t\t// strict null checks need us to check if chartContainer and current exist.\r\n\t\t// but once current exists, it is of type HTMLCanvasElement\r\n\t\tif (chartContainer && chartContainer.current) {\r\n\t\t\tconst newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n\t\t\tsetChartInstance(newChartInstance);\r\n\t\t}\r\n\t}, [firstData, chartLabels, window.innerWidth]);\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<canvas ref={chartContainer} height=\"75px\" width=\"100%\" className=\"chart\" />\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default DoughnutChart;\r\n","D:\\Projects\\Peerbits\\PRISMA\\Prisma\\f3m-dashboard-frontend\\src\\shared\\helpers\\constants.ts",[],{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"170","replacedBy":"174"},{"ruleId":"172","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":1,"column":36,"nodeType":"178","messageId":"179","endLine":1,"endColumn":44},{"ruleId":"176","severity":1,"message":"180","line":1,"column":46,"nodeType":"178","messageId":"179","endLine":1,"endColumn":55},{"ruleId":"176","severity":1,"message":"181","line":1,"column":17,"nodeType":"178","messageId":"179","endLine":1,"endColumn":34},{"ruleId":"176","severity":1,"message":"177","line":1,"column":47,"nodeType":"178","messageId":"179","endLine":1,"endColumn":55},{"ruleId":"176","severity":1,"message":"182","line":29,"column":8,"nodeType":"178","messageId":"179","endLine":29,"endColumn":11},{"ruleId":"176","severity":1,"message":"183","line":31,"column":8,"nodeType":"178","messageId":"179","endLine":31,"endColumn":19},{"ruleId":"176","severity":1,"message":"184","line":195,"column":12,"nodeType":"178","messageId":"179","endLine":195,"endColumn":15},{"ruleId":"176","severity":1,"message":"185","line":195,"column":17,"nodeType":"178","messageId":"179","endLine":195,"endColumn":23},{"ruleId":"186","severity":1,"message":"187","line":288,"column":8,"nodeType":"188","endLine":288,"endColumn":10,"suggestions":"189"},{"ruleId":"176","severity":1,"message":"190","line":1,"column":17,"nodeType":"178","messageId":"179","endLine":1,"endColumn":26},{"ruleId":"176","severity":1,"message":"191","line":4,"column":8,"nodeType":"178","messageId":"179","endLine":4,"endColumn":13},{"ruleId":"176","severity":1,"message":"192","line":16,"column":8,"nodeType":"178","messageId":"179","endLine":16,"endColumn":18},{"ruleId":"176","severity":1,"message":"193","line":17,"column":8,"nodeType":"178","messageId":"179","endLine":17,"endColumn":17},{"ruleId":"176","severity":1,"message":"194","line":21,"column":8,"nodeType":"178","messageId":"179","endLine":21,"endColumn":20},{"ruleId":"176","severity":1,"message":"195","line":132,"column":7,"nodeType":"178","messageId":"179","endLine":132,"endColumn":12},{"ruleId":"176","severity":1,"message":"196","line":159,"column":10,"nodeType":"178","messageId":"179","endLine":159,"endColumn":19},{"ruleId":"176","severity":1,"message":"197","line":168,"column":9,"nodeType":"178","messageId":"179","endLine":168,"endColumn":14},{"ruleId":"176","severity":1,"message":"198","line":172,"column":10,"nodeType":"178","messageId":"179","endLine":172,"endColumn":23},{"ruleId":"199","severity":1,"message":"200","line":202,"column":71,"nodeType":"201","messageId":"202","endLine":202,"endColumn":73},{"ruleId":"186","severity":1,"message":"203","line":244,"column":8,"nodeType":"188","endLine":244,"endColumn":18,"suggestions":"204"},{"ruleId":"176","severity":1,"message":"184","line":249,"column":10,"nodeType":"178","messageId":"179","endLine":249,"endColumn":13},{"ruleId":"176","severity":1,"message":"205","line":251,"column":9,"nodeType":"178","messageId":"179","endLine":251,"endColumn":27},{"ruleId":"199","severity":1,"message":"200","line":131,"column":14,"nodeType":"201","messageId":"202","endLine":131,"endColumn":16},{"ruleId":"176","severity":1,"message":"206","line":152,"column":11,"nodeType":"178","messageId":"179","endLine":152,"endColumn":19},{"ruleId":"176","severity":1,"message":"206","line":167,"column":11,"nodeType":"178","messageId":"179","endLine":167,"endColumn":19},{"ruleId":"186","severity":1,"message":"207","line":198,"column":6,"nodeType":"188","endLine":198,"endColumn":18,"suggestions":"208"},{"ruleId":"209","severity":1,"message":"210","line":231,"column":19,"nodeType":"211","endLine":231,"endColumn":59},{"ruleId":"176","severity":1,"message":"212","line":7,"column":19,"nodeType":"178","messageId":"179","endLine":7,"endColumn":36},{"ruleId":"176","severity":1,"message":"213","line":110,"column":9,"nodeType":"178","messageId":"179","endLine":110,"endColumn":22},{"ruleId":"176","severity":1,"message":"214","line":111,"column":17,"nodeType":"178","messageId":"179","endLine":111,"endColumn":26},{"ruleId":"199","severity":1,"message":"215","line":159,"column":21,"nodeType":"201","messageId":"202","endLine":159,"endColumn":23},{"ruleId":"186","severity":1,"message":"216","line":257,"column":5,"nodeType":"188","endLine":257,"endColumn":7,"suggestions":"217"},{"ruleId":"199","severity":1,"message":"200","line":37,"column":26,"nodeType":"201","messageId":"202","endLine":37,"endColumn":28},{"ruleId":"176","severity":1,"message":"177","line":1,"column":17,"nodeType":"178","messageId":"179","endLine":1,"endColumn":25},{"ruleId":"176","severity":1,"message":"218","line":5,"column":18,"nodeType":"178","messageId":"179","endLine":5,"endColumn":29},{"ruleId":"176","severity":1,"message":"219","line":17,"column":22,"nodeType":"178","messageId":"179","endLine":17,"endColumn":26},{"ruleId":"176","severity":1,"message":"220","line":18,"column":8,"nodeType":"178","messageId":"179","endLine":18,"endColumn":22},{"ruleId":"176","severity":1,"message":"221","line":25,"column":8,"nodeType":"178","messageId":"179","endLine":25,"endColumn":16},{"ruleId":"176","severity":1,"message":"222","line":26,"column":20,"nodeType":"178","messageId":"179","endLine":26,"endColumn":30},{"ruleId":"176","severity":1,"message":"223","line":70,"column":10,"nodeType":"178","messageId":"179","endLine":70,"endColumn":20},{"ruleId":"176","severity":1,"message":"224","line":168,"column":10,"nodeType":"178","messageId":"179","endLine":168,"endColumn":28},{"ruleId":"176","severity":1,"message":"225","line":202,"column":12,"nodeType":"178","messageId":"179","endLine":202,"endColumn":21},{"ruleId":"176","severity":1,"message":"226","line":202,"column":23,"nodeType":"178","messageId":"179","endLine":202,"endColumn":35},{"ruleId":"176","severity":1,"message":"227","line":214,"column":12,"nodeType":"178","messageId":"179","endLine":214,"endColumn":20},{"ruleId":"176","severity":1,"message":"228","line":255,"column":11,"nodeType":"178","messageId":"179","endLine":255,"endColumn":26},{"ruleId":"176","severity":1,"message":"229","line":259,"column":12,"nodeType":"178","messageId":"179","endLine":259,"endColumn":18},{"ruleId":"176","severity":1,"message":"230","line":259,"column":20,"nodeType":"178","messageId":"179","endLine":259,"endColumn":29},{"ruleId":"186","severity":1,"message":"231","line":293,"column":12,"nodeType":"188","endLine":293,"endColumn":22,"suggestions":"232"},{"ruleId":"186","severity":1,"message":"233","line":301,"column":8,"nodeType":"188","endLine":301,"endColumn":18,"suggestions":"234"},{"ruleId":"235","severity":1,"message":"236","line":319,"column":29,"nodeType":"237","messageId":"238","endLine":319,"endColumn":31},{"ruleId":"176","severity":1,"message":"239","line":357,"column":20,"nodeType":"178","messageId":"179","endLine":357,"endColumn":22},{"ruleId":"240","severity":1,"message":"241","line":364,"column":39,"nodeType":"201","messageId":"242","endLine":364,"endColumn":40},{"ruleId":"240","severity":1,"message":"241","line":364,"column":45,"nodeType":"201","messageId":"242","endLine":364,"endColumn":46},{"ruleId":"176","severity":1,"message":"243","line":379,"column":14,"nodeType":"178","messageId":"179","endLine":379,"endColumn":19},{"ruleId":"176","severity":1,"message":"180","line":1,"column":17,"nodeType":"178","messageId":"179","endLine":1,"endColumn":26},{"ruleId":"176","severity":1,"message":"244","line":1,"column":28,"nodeType":"178","messageId":"179","endLine":1,"endColumn":34},{"ruleId":"176","severity":1,"message":"177","line":1,"column":36,"nodeType":"178","messageId":"179","endLine":1,"endColumn":44},{"ruleId":"176","severity":1,"message":"212","line":7,"column":19,"nodeType":"178","messageId":"179","endLine":7,"endColumn":36},{"ruleId":"176","severity":1,"message":"213","line":104,"column":9,"nodeType":"178","messageId":"179","endLine":104,"endColumn":22},{"ruleId":"176","severity":1,"message":"214","line":105,"column":17,"nodeType":"178","messageId":"179","endLine":105,"endColumn":26},{"ruleId":"199","severity":1,"message":"215","line":172,"column":21,"nodeType":"201","messageId":"202","endLine":172,"endColumn":23},{"ruleId":"186","severity":1,"message":"216","line":279,"column":5,"nodeType":"188","endLine":279,"endColumn":34,"suggestions":"245"},{"ruleId":"246","severity":1,"message":"247","line":33,"column":3,"nodeType":"248","messageId":"202","endLine":33,"endColumn":7},{"ruleId":"246","severity":1,"message":"247","line":34,"column":3,"nodeType":"248","messageId":"202","endLine":34,"endColumn":7},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"199","severity":1,"message":"215","line":5,"column":86,"nodeType":"201","messageId":"202","endLine":5,"endColumn":88},{"ruleId":"176","severity":1,"message":"249","line":57,"column":9,"nodeType":"178","messageId":"179","endLine":57,"endColumn":14},{"ruleId":"176","severity":1,"message":"213","line":58,"column":9,"nodeType":"178","messageId":"179","endLine":58,"endColumn":22},{"ruleId":"199","severity":1,"message":"215","line":108,"column":22,"nodeType":"201","messageId":"202","endLine":108,"endColumn":24},{"ruleId":"186","severity":1,"message":"250","line":122,"column":5,"nodeType":"188","endLine":122,"endColumn":48,"suggestions":"251"},"no-native-reassign",["252"],"no-negated-in-lhs",["253"],["252"],["253"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'FunctionComponent' is defined but never used.","'bar' is defined but never used.","'Breadcrumbs' is defined but never used.","'age' is assigned a value but never used.","'setAge' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'BindDashboard' and 'payload'. Either include them or remove the dependency array.","ArrayExpression",["254"],"'Component' is defined but never used.","'Input' is defined but never used.","'IconButton' is defined but never used.","'CloseIcon' is defined but never used.","'NumberFormat' is defined but never used.","'names' is assigned a value but never used.","'getStyles' is defined but never used.","'theme' is assigned a value but never used.","'referenceDate' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has an unnecessary dependency: 'dispatch'. Either exclude it or remove the dependency array. Outer scope values like 'dispatch' aren't valid dependencies because mutating them doesn't re-render the component.",["255"],"'handleChangeSingle' is assigned a value but never used.","'response' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getFavouriteMenuAsync' and 'getHomePageMenuAsync'. Either include them or remove the dependency array.",["256"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ChartTooltipModel' is defined but never used.","'chartInstance' is assigned a value but never used.","'setZoomOn' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'chartConfig'. Either include it or remove the dependency array.",["257"],"'DialogProps' is defined but never used.","'Menu' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'Snackbar' is defined but never used.","'AlertProps' is defined but never used.","'createData' is defined but never used.","'NumberFormatCustom' is defined but never used.","'salesData' is assigned a value but never used.","'setSalesData' is assigned a value but never used.","'anchorEl' is assigned a value but never used.","'handleCloseMenu' is assigned a value but never used.","'values' is assigned a value but never used.","'setValues' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'year'. Either include it or remove the dependency array. Outer scope values like 'dispatch' aren't valid dependencies because mutating them doesn't re-render the component.",["258"],"React Hook useEffect has a missing dependency: 'arraySalesData'. Either include it or remove the dependency array.",["259"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'x2' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'Alert' is defined but never used.","'useRef' is defined but never used.",["260"],"no-eval","eval can be harmful.","CallExpression","'width' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'customTooltip', 'firstBackgroundColorData', 'firstBorderColorData', 'legendDisplay', and 'tooltipCallback'. Either include them or remove the dependency array. Outer scope values like 'window.innerWidth' aren't valid dependencies because mutating them doesn't re-render the component.",["261"],"no-global-assign","no-unsafe-negation",{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},"Update the dependencies array to be: [BindDashboard, payload]",{"range":"278","text":"279"},"Update the dependencies array to be: []",{"range":"280","text":"281"},"Update the dependencies array to be: [getFavouriteMenuAsync, getHomePageMenuAsync, props.menu]",{"range":"282","text":"283"},"Update the dependencies array to be: [chartConfig]",{"range":"284","text":"285"},"Update the dependencies array to be: [year]",{"range":"286","text":"287"},"Update the dependencies array to be: [arraySalesData, dispatch]",{"range":"288","text":"289"},"Update the dependencies array to be: [dateTo, dateFrom, firstData, chartConfig]",{"range":"290","text":"291"},"Update the dependencies array to be: [firstData, chartLabels, firstBackgroundColorData, firstBorderColorData, customTooltip, tooltipCallback, legendDisplay]",{"range":"292","text":"293"},[8820,8822],"[BindDashboard, payload]",[6398,6408],"[]",[5255,5267],"[getFavouriteMenuAsync, getHomePageMenuAsync, props.menu]",[6807,6809],"[chartConfig]",[9382,9392],"[year]",[9494,9504],"[arraySalesData, dispatch]",[8799,8828],"[dateTo, dateFrom, firstData, chartConfig]",[3807,3850],"[firstData, chartLabels, firstBackgroundColorData, firstBorderColorData, customTooltip, tooltipCallback, legendDisplay]"]