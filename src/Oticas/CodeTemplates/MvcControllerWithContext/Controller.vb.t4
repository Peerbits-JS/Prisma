<#@ template language="VB" HostSpecific="True" #>
<#@ output extension="vb" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="EntitySetVariable" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Boolean" name="IsOverpostingProtectionRequired" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name ="OverpostingWarningMessage" #>
<#@ parameter type="System.Collections.Generic.HashSet(Of System.String)" name="RequiredNamespaces" #>
<#
    Dim routePrefix As String
    If String.IsNullOrEmpty(AreaName) Then
        routePrefix = ControllerRootName
    Else
        routePrefix = AreaName + "/" + ControllerRootName
    End If
#>
<# If (UseAsync) Then #>
Imports System.Threading.Tasks
<# End If #>
Imports Kendo.Mvc.UI
Imports Kendo.Mvc.Extensions
<# For Each namespaceName As String In RequiredNamespaces  #>
Imports <#= namespaceName #>.Repositorio
<# Next #>
<#
    Dim entitySetName = ModelMetadata.EntitySetName
    Dim entitySetVar = If (EntitySetVariable, If (String.IsNullOrEmpty(entitySetName), entitySetName, entitySetName.Substring(0, 1).ToLowerInvariant() + entitySetName.Substring(1)))
    Dim primaryKeyName = ModelMetadata.PrimaryKeys(0).PropertyName
    Dim primaryKeyShortTypeName = ModelMetadata.PrimaryKeys(0).ShortTypeName
    Dim primaryKeyDefaultValue = ModelMetadata.PrimaryKeys(0).DefaultValue
    Dim primaryKeyType = ModelMetadata.PrimaryKeys(0).TypeName
    Dim primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName)
    Dim primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys(0).IsAutoGenerated
    Dim lambdaVar = ModelVariable(0)
    Dim relatedProperties As IDictionary(Of String, RelatedModelMetadata) = ModelMetadata.RelatedEntities.ToDictionary(Function(item) item.AssociationPropertyName)

    Dim bindAttribute As String
    If (IsOverpostingProtectionRequired) Then
        bindAttribute = String.Format("<Bind(Include:=""{0}"")> ", BindAttributeIncludeText)
    Else
        bindAttribute = String.Empty
    End If

	Dim novoNomeCont = ControllerName.Replace("Controller", "")
	Dim novoNomeContVar = novoNomeCont.Remove(novoNomeCont.Length - 1).ToLower()

	Dim campos = String.Empty
	Dim camposTabToObj = String.Empty
	Dim camposObjToTab = String.Empty

	For Each modelProperty As PropertyMetadata In ModelMetadata.Properties
		campos += "." + modelProperty.PropertyName + " = f." + modelProperty.PropertyName + ", "
		camposTabToObj += "." + modelProperty.PropertyName + " = t." + modelProperty.PropertyName + ", "
		camposObjToTab += "." + modelProperty.PropertyName + " = o." + modelProperty.PropertyName + ", "
	Next

	campos = campos.Remove(campos.Length - 2)
	camposTabToObj = camposTabToObj.Remove(camposTabToObj.Length - 2)
	camposObjToTab = camposObjToTab.Remove(camposObjToTab.Length - 2)

	Dim bd_Old = ContextTypeName
	Dim bd = "Producao.BD.Dinamica.Aplicacao"

	Dim cabecalhoFuncao = "<DataSourceRequest> request As DataSourceRequest, <Bind> ByVal modelo As " + novoNomeCont + ", filtro As ClsF3MFiltro"
#>
Imports F3M.Modelos.Base
Imports F3M.Modelos.Comunicacao
Imports F3M.Modelos.Constantes
Imports F3M.Modelos.Grelhas
Imports Producao.Repositorio.COLOCAR_NAMESPACE_DO_REPOSITORIO
Imports Producao.Areas.Administracao.Controllers

Namespace <#= Namespace #>
    Public Class <#= ControllerName #>
        Inherits ClsF3MController(Of <#= bd #>, <#= ModelTypeName #>, <#= novoNomeCont #>)
		
        Const strOpcaoMenu As String = OpcoesAcesso.c<#= novoNomeCont #>
		
#Region "REPOSITORIO"
        Sub New()
            MyBase.New(New Repositorio<#= novoNomeCont #>(), strOpcaoMenu)
        End Sub
#End Region

#Region "ACOES DEFAULT GET CRUD"
		'------------------ INDEX PARA GRELHAS / GRELHAS DE LINHAS ------------------
        ' GET: Index
        <F3MAcesso(Acesso:=strOpcaoMenu)>
        Function Index(vistaParcial As Boolean?) As ActionResult
            Return MyBase.IndexG(vistaParcial)
        End Function

		'------------------ INDEX PARA GRELHAS FORM ------------------
        ' GET: Index
        <F3MAcesso(Acesso:=strOpcaoMenu)>
        Function Index(Optional ByVal IDVista As Long = 0) As ActionResult
            Return MyBase.IndexGF(IDVista)
        End Function

        ' GET: IndexGrelhaForm
        <F3MAcesso(Acesso:=strOpcaoMenu)>
        Function IndexGrelhaForm(Optional ByVal IDVista As Long = 0) As ActionResult
            Return PartialView(RetornaGF(IDVista))
        End Function

        ' GET: IndexGrelha
        <F3MAcesso(Acesso:=strOpcaoMenu)>
        Function IndexGrelha() As ActionResult
            Return View()
        End Function

        ' GET: Visualiza
        <F3MAcesso(Acesso:=strOpcaoMenu)>
<# If (UseAsync) Then #>
        Async Function Visualiza(ByVal id As <#= primaryKeyNullableTypeName #>) As Task(Of ActionResult)
<# Else #>
        Function Visualiza(ByVal id As <#= primaryKeyNullableTypeName #>) As ActionResult
<# End If #>
            Return RetornaAcoes(id, AcoesFormulario.Consultar)
        End Function
		
        ' GET: Adiciona
        <F3MAcesso(Acao:=AcoesFormulario.Adicionar, Acesso:=strOpcaoMenu)>
<# If (UseAsync) Then #>
        Async Function Adiciona() As Task(Of ActionResult)
<# Else #>
        Function Adiciona() As ActionResult
<# End If #>
            Return RetornaAcoes(Nothing, AcoesFormulario.Adicionar)
        End Function

        ' GET: Edita
        <F3MAcesso(Acao:=AcoesFormulario.Alterar, Acesso:=strOpcaoMenu)>
<# If (UseAsync) Then #>
        Async Function Edita(ByVal id As <#= primaryKeyNullableTypeName #>) As Task(Of ActionResult)
<# Else #>
        Function Edita(ByVal id As <#= primaryKeyNullableTypeName #>) As ActionResult
<# End If #>
            Return RetornaAcoes(id, AcoesFormulario.Alterar)
        End Function
#End Region

#Region "ACOES DEFAULT POST CRUD"
        ' POST: Adiciona
<#	If (IsOverpostingProtectionRequired) Then #>
<#		For Each line As String In OverpostingWarningMessage.Split(New string() { Environment.NewLine }, StringSplitOptions.None) #>
        '<#= line #>
<#		Next #>
<#	End If #>
        <F3MAcesso(Acao:=AcoesFormulario.Adicionar, Acesso:=strOpcaoMenu)>
        <HttpPost>
<# If (UseAsync) Then #>
        Async Function Adiciona(<#= cabecalhoFuncao #>) As Task(Of JsonResult)
<# Else #>
        Function Adiciona(<#= cabecalhoFuncao #>) As JsonResult
<# End If #>
			Return ExecutaAcoes(request, modelo, filtro, AcoesFormulario.Adicionar)
        End Function

        ' POST: Edita
<#	If (IsOverpostingProtectionRequired) Then #>
<#		For Each line As String In OverpostingWarningMessage.Split(New string() { Environment.NewLine }, StringSplitOptions.None) #>
        '<#= line #>
<#		Next #>
<#	End If #>
        <F3MAcesso(Acao:=AcoesFormulario.Alterar, Acesso:=strOpcaoMenu)>
        <HttpPost>
<# If (UseAsync) Then #>
        Async Function Edita(<#= cabecalhoFuncao #>) As Task(Of JsonResult)
<# Else #>
        Function Edita(<#= cabecalhoFuncao #>) As JsonResult
<# End If #>
			Return ExecutaAcoes(request, modelo, filtro, AcoesFormulario.Alterar)
        End Function

        ' POST: Remove
        <F3MAcesso(Acao:=AcoesFormulario.Remover, Acesso:=strOpcaoMenu)>
        <HttpPost>
<# If (UseAsync) Then #>
        Async Function Remove(<#= cabecalhoFuncao #>) As Task(Of JsonResult)
<# Else #>
        Function Remove(<#= cabecalhoFuncao #>) As JsonResult
<# End If #>
			Return ExecutaAcoes(request, modelo, filtro, AcoesFormulario.Remover)
        End Function
#End Region

#Region "ACOES DE LEITURA"
        ' METODO PARA DE LEITURA PARA AS GRELHAS
        <F3MAcesso(Acesso:=strOpcaoMenu)>
        Function Lista(<DataSourceRequest> request As DataSourceRequest, inObjFiltro As ClsF3MFiltro) As JsonResult
            Return ListaDados(request, inObjFiltro)
        End Function

        ' METODO PARA DE LEITURA PARA A COMBO/DDL
        <F3MAcesso(Acesso:=strOpcaoMenu)>
        Function ListaCombo(<DataSourceRequest> request As DataSourceRequest, inObjFiltro As ClsF3MFiltro) As JsonResult
            Return ListaDadosCombo(request, inObjFiltro)
        End Function

        ' METODO PARA PESQUISA NA LISTA BASE
        <F3MAcesso(Acesso:=strOpcaoMenu)>
        Function Pesquisa(<DataSourceRequest> request As DataSourceRequest, inObjFiltro As ClsF3MFiltro) As JsonResult
            Return PesquisaDados(request, inObjFiltro)
        End Function
#End Region

    End Class
End Namespace
<#+
' This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
' sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    Function GetNullableTypeName(ByVal typeNameString As String, ByVal shortTypeName As String) As String
        ' The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        ' In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Dim primaryKeyType As Type = Nothing
        Try
            primaryKeyType = Type.GetType(typeNameString)
        Catch
        End Try
        If (primaryKeyType IsNot Nothing) AndAlso (primaryKeyType.IsPrimitive OrElse IsGuid(typeNameString)) Then
            Return shortTypeName + "?"
        End If
        Return shortTypeName
    End Function

    Function IsGuid(ByVal typeNameString As String) As Boolean
        Return String.Equals("System.Guid", typeNameString, StringComparison.OrdinalIgnoreCase)
    End Function
#>